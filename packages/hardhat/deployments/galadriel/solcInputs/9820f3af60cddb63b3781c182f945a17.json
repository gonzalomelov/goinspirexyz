{
  "language": "Solidity",
  "sources": {
    "contracts/TodoList.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\n// // Useful for debugging. Remove when deploying to a live network.\n// import \"hardhat/console.sol\";\n\ncontract TodoList {\n    address public owner;\n    \n    struct Todo {\n        uint256 id;\n        string content;\n        bool isCompleted;\n        uint256 createdAt;\n        address user;\n    }\n\n    mapping(address => Todo[]) private userTodos;\n    mapping(address => uint256) private userTodoCount;\n    address[] private userAddresses;\n\n    event TodoCreated(address indexed user, uint256 id, string content);\n    event TodoCompleted(address indexed user, uint256 id);\n    event TodoDeleted(address indexed user, uint256 id);\n\n    constructor() {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Only the owner can call this function\");\n        _;\n    }\n\n    function createTodo(string memory _content) public {\n        // // Print data to the hardhat chain console. Remove when deploying to a live network.\n\t\t// console.log(\n\t\t// \t\"Setting new greeting '%s' from %s\",\n\t\t// \t_content,\n\t\t// \tmsg.sender\n\t\t// );\n\n        uint256 todoId = userTodoCount[msg.sender];\n        userTodos[msg.sender].push(Todo(todoId, _content, false, block.timestamp, msg.sender));\n        userTodoCount[msg.sender]++;\n        if (userTodoCount[msg.sender] == 1) {\n            userAddresses.push(msg.sender);\n        }\n        emit TodoCreated(msg.sender, todoId, _content);\n    }\n\n    function getTodos() public view returns (Todo[] memory) {\n        return userTodos[msg.sender];\n    }\n\n    function completeTodo(uint256 _id) public {\n        require(_id < userTodoCount[msg.sender], \"Todo does not exist\");\n        require(userTodos[msg.sender][_id].user == msg.sender, \"Only the creator can complete this todo\");\n        userTodos[msg.sender][_id].isCompleted = true;\n        emit TodoCompleted(msg.sender, _id);\n    }\n\n    function deleteTodo(uint256 _id) public {\n        require(_id < userTodoCount[msg.sender], \"Todo does not exist\");\n        require(userTodos[msg.sender][_id].user == msg.sender, \"Only the creator can delete this todo\");\n        for (uint i = _id; i < userTodos[msg.sender].length - 1; i++) {\n            userTodos[msg.sender][i] = userTodos[msg.sender][i + 1];\n        }\n        userTodos[msg.sender].pop();\n        userTodoCount[msg.sender]--;\n        emit TodoDeleted(msg.sender, _id);\n    }\n\n    function getAllTodos() public view onlyOwner returns (Todo[] memory) {\n        uint256 totalTodos = 0;\n        for (uint i = 0; i < userAddresses.length; i++) {\n            totalTodos += userTodoCount[userAddresses[i]];\n        }\n\n        Todo[] memory allTodos = new Todo[](totalTodos);\n        uint256 index = 0;\n\n        for (uint i = 0; i < userAddresses.length; i++) {\n            address user = userAddresses[i];\n            for (uint j = 0; j < userTodoCount[user]; j++) {\n                allTodos[index] = userTodos[user][j];\n                index++;\n            }\n        }\n\n        return allTodos;\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}