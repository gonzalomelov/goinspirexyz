{
  "language": "Solidity",
  "sources": {
    "contracts/TodoList.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\ncontract TodoList {\n    struct Todo {\n        uint256 id;\n        string content;\n        bool isCompleted;\n        uint256 createdAt;\n        address user;\n    }\n\n    mapping(address => Todo[]) private userTodos;\n    mapping(address => uint256) private userTodoCount;\n\n    event TodoCreated(address indexed user, uint256 id, string content);\n    event TodoCompleted(address indexed user, uint256 id);\n    event TodoDeleted(address indexed user, uint256 id);\n\n    function createTodo(string memory _content) public {\n        uint256 todoId = userTodoCount[msg.sender];\n        userTodos[msg.sender].push(Todo(todoId, _content, false, block.timestamp, msg.sender));\n        userTodoCount[msg.sender]++;\n        emit TodoCreated(msg.sender, todoId, _content);\n    }\n\n    function getTodos() public view returns (Todo[] memory) {\n        return userTodos[msg.sender];\n    }\n\n    function completeTodo(uint256 _id) public {\n        require(_id < userTodoCount[msg.sender], \"Todo does not exist\");\n        require(userTodos[msg.sender][_id].user == msg.sender, \"Only the creator can complete this todo\");\n        userTodos[msg.sender][_id].isCompleted = true;\n        emit TodoCompleted(msg.sender, _id);\n    }\n\n    function deleteTodo(uint256 _id) public {\n        require(_id < userTodoCount[msg.sender], \"Todo does not exist\");\n        require(userTodos[msg.sender][_id].user == msg.sender, \"Only the creator can delete this todo\");\n        for (uint i = _id; i < userTodos[msg.sender].length - 1; i++) {\n            userTodos[msg.sender][i] = userTodos[msg.sender][i + 1];\n        }\n        userTodos[msg.sender].pop();\n        userTodoCount[msg.sender]--;\n        emit TodoDeleted(msg.sender, _id);\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}