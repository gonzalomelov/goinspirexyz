{
  "address": "0xA26284DDb36aEd348446c791586c7763F0ADE081",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "initialOracleAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "systemPrompt",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "techAgentFactoryAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "socialAgentFactoryAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dataAgentFactoryAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "runId",
          "type": "uint256"
        }
      ],
      "name": "AgentRunCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOracleAddress",
          "type": "address"
        }
      ],
      "name": "OracleAddressUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "runId",
          "type": "uint256"
        }
      ],
      "name": "addMessage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "agentRuns",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "responsesCount",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "max_iterations",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "is_finished",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dataAgent",
      "outputs": [
        {
          "internalType": "contract IOpenAiChatGpt",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "agentId",
          "type": "uint256"
        }
      ],
      "name": "getMessageHistoryContents",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "agentId",
          "type": "uint256"
        }
      ],
      "name": "getMessageHistoryRoles",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "runId",
          "type": "uint256"
        }
      ],
      "name": "isRunFinished",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "runId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "response",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "errorMessage",
          "type": "string"
        }
      ],
      "name": "onOracleFunctionResponse",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "runId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "id",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "content",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "functionName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "functionArguments",
              "type": "string"
            },
            {
              "internalType": "uint64",
              "name": "created",
              "type": "uint64"
            },
            {
              "internalType": "string",
              "name": "model",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "systemFingerprint",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "object",
              "type": "string"
            },
            {
              "internalType": "uint32",
              "name": "completionTokens",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "promptTokens",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "totalTokens",
              "type": "uint32"
            }
          ],
          "internalType": "struct IOracle.OpenAiResponse",
          "name": "response",
          "type": "tuple"
        },
        {
          "internalType": "string",
          "name": "errorMessage",
          "type": "string"
        }
      ],
      "name": "onOracleOpenAiLlmResponse",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "prompt",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "query",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "max_iterations",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "techAgentPrompt",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "socialAgentPrompt",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "dataAgentPrompt",
          "type": "string"
        }
      ],
      "name": "runAgent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOracleAddress",
          "type": "address"
        }
      ],
      "name": "setOracleAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "socialAgent",
      "outputs": [
        {
          "internalType": "contract IOpenAiChatGpt",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "techAgent",
      "outputs": [
        {
          "internalType": "contract IOpenAiChatGpt",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x3bc9782b2368c7f4c9f16b63659103e0ba90ac445aa43e484d8b49505a01a205",
  "receipt": {
    "to": "0x0000000000000000000000000000000000000000",
    "from": "0x372082138ea420eBe56078D73F0359D686A7E981",
    "contractAddress": "0xA26284DDb36aEd348446c791586c7763F0ADE081",
    "transactionIndex": 0,
    "gasUsed": "10870873",
    "logsBloom": "0x
    "blockHash": "0x651bf6ee3a68910fb1196b5d875d1cd2937e408fc50981bfcc6e02f713f7b926",
    "transactionHash": "0x3bc9782b2368c7f4c9f16b63659103e0ba90ac445aa43e484d8b49505a01a205",
    "logs": [],
    "blockNumber": 34963578,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x68EC9556830AD097D661Df2557FBCeC166a0A075",
    "You are a helpful assistant",
    "0x0CC13bdBfC9300A6b7cD1E71863922661e67300C",
    "0x4f282c28161f98b072e6d875fe80bE82e92510fb",
    "0xEE1800557937fA878c16a4376BCd5E0fa4B4D8E6"
  ],
  "numDeployments": 1,
  "solcInputHash": "51cbc314716c7ac38a7f214dc300970e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOracleAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"systemPrompt\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"techAgentFactoryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"socialAgentFactoryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dataAgentFactoryAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"runId\",\"type\":\"uint256\"}],\"name\":\"AgentRunCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOracleAddress\",\"type\":\"address\"}],\"name\":\"OracleAddressUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"runId\",\"type\":\"uint256\"}],\"name\":\"addMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"agentRuns\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"responsesCount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"max_iterations\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"is_finished\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dataAgent\",\"outputs\":[{\"internalType\":\"contract IOpenAiChatGpt\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"agentId\",\"type\":\"uint256\"}],\"name\":\"getMessageHistoryContents\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"agentId\",\"type\":\"uint256\"}],\"name\":\"getMessageHistoryRoles\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"runId\",\"type\":\"uint256\"}],\"name\":\"isRunFinished\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"runId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"response\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"errorMessage\",\"type\":\"string\"}],\"name\":\"onOracleFunctionResponse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"runId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"functionName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"functionArguments\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"created\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"model\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"systemFingerprint\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"object\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"completionTokens\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"promptTokens\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"totalTokens\",\"type\":\"uint32\"}],\"internalType\":\"struct IOracle.OpenAiResponse\",\"name\":\"response\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"errorMessage\",\"type\":\"string\"}],\"name\":\"onOracleOpenAiLlmResponse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prompt\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"query\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"max_iterations\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"techAgentPrompt\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"socialAgentPrompt\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"dataAgentPrompt\",\"type\":\"string\"}],\"name\":\"runAgent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOracleAddress\",\"type\":\"address\"}],\"name\":\"setOracleAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"socialAgent\",\"outputs\":[{\"internalType\":\"contract IOpenAiChatGpt\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"techAgent\",\"outputs\":[{\"internalType\":\"contract IOpenAiChatGpt\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LeadAgent.sol\":\"LeadAgent\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/BaseAgent.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport \\\"./EnhancedAnthropicChatGpt.sol\\\";\\n\\ncontract BaseAgent is EnhancedAnthropicChatGpt {\\n    constructor(address initialOracleAddress) EnhancedAnthropicChatGpt(initialOracleAddress) {}\\n}\",\"keccak256\":\"0x6a9a1124d9255efdacf452ada10c494fbc83c498f78875b99019115339210573\",\"license\":\"UNLICENSED\"},\"contracts/DataAgent.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport \\\"./BaseAgent.sol\\\";\\n\\ncontract DataAgent is BaseAgent {\\n    constructor(address initialOracleAddress) BaseAgent(initialOracleAddress) {}\\n}\",\"keccak256\":\"0xcda8cfd0dca2abab5a0fae7ffe277e57b787db9c8de5214f3991c745b63dd473\",\"license\":\"UNLICENSED\"},\"contracts/EnhancedAnthropicChatGpt.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\n// Uncomment this line to use console.log\\n// import \\\"hardhat/console.sol\\\";\\nimport \\\"./interfaces/IOracle.sol\\\";\\n\\n// @title ChatGpt\\n// @notice This contract interacts with teeML oracle to handle chat interactions using the Anthropic model.\\ncontract EnhancedAnthropicChatGpt {\\n\\n    struct Message {\\n        string role;\\n        string content;\\n    }\\n\\n    struct ChatRun {\\n        address owner;\\n        Message[] messages;\\n        uint messagesCount;\\n    }\\n\\n    // @notice Mapping from chat ID to ChatRun\\n    mapping(uint => ChatRun) public chatRuns;\\n    uint private chatRunsCount;\\n\\n    // @notice Event emitted when a new chat is created\\n    event ChatCreated(address indexed owner, uint indexed chatId);\\n\\n    // @notice Address of the contract owner\\n    address private owner;\\n    \\n    // @notice Address of the oracle contract\\n    address public oracleAddress;\\n\\n    // @notice Configuration for the LLM request\\n    IOracle.LlmRequest private config;\\n    \\n    // @notice CID of the knowledge base\\n    string public knowledgeBase;\\n\\n    // @notice Mapping from chat ID to the tool currently running\\n    mapping(uint => string) public toolRunning;\\n\\n    // @notice Event emitted when the oracle address is updated\\n    event OracleAddressUpdated(address indexed newOracleAddress);\\n\\n    // Add these near the top of your contract, after the existing state variables\\n    mapping(address => bool) public whitelistedAddresses;\\n    address[] public whitelistedAddressList;\\n\\n    // Add this modifier\\n    modifier onlyOwnerOrWhitelisted() {\\n        require(msg.sender == owner || whitelistedAddresses[msg.sender], \\\"Not authorized\\\");\\n        _;\\n    }\\n\\n    // Add these functions\\n    function addToWhitelist(address _address) public onlyOwner {\\n        if (!whitelistedAddresses[_address]) {\\n            whitelistedAddresses[_address] = true;\\n            whitelistedAddressList.push(_address);\\n        }\\n    }\\n\\n    function removeFromWhitelist(address _address) public onlyOwner {\\n        if (whitelistedAddresses[_address]) {\\n            whitelistedAddresses[_address] = false;\\n            // Remove from the list\\n            for (uint i = 0; i < whitelistedAddressList.length; i++) {\\n                if (whitelistedAddressList[i] == _address) {\\n                    whitelistedAddressList[i] = whitelistedAddressList[whitelistedAddressList.length - 1];\\n                    whitelistedAddressList.pop();\\n                    break;\\n                }\\n            }\\n        }\\n    }\\n\\n    function getWhitelistedAddresses() public view returns (address[] memory) {\\n        return whitelistedAddressList;\\n    }\\n\\n    function isWhitelisted(address _address) public view returns (bool) {\\n        return whitelistedAddresses[_address];\\n    }\\n\\n    // @param initialOracleAddress Initial address of the oracle contract\\n    constructor(address initialOracleAddress) {\\n        owner = msg.sender;\\n        oracleAddress = initialOracleAddress;\\n        chatRunsCount = 0;\\n\\n        config = IOracle.LlmRequest({\\n            model : \\\"claude-3-5-sonnet-20240620\\\",\\n            frequencyPenalty : 21, // > 20 for null\\n            logitBias : \\\"\\\", // empty str for null\\n            maxTokens : 1000, // 0 for null\\n            presencePenalty : 21, // > 20 for null\\n            responseFormat : \\\"{\\\\\\\"type\\\\\\\":\\\\\\\"text\\\\\\\"}\\\",\\n            seed : 0, // null\\n            stop : \\\"\\\", // null\\n            temperature : 10, // Example temperature (scaled up, 10 means 1.0), > 20 means null\\n            topP : 101, // Percentage 0-100, > 100 means null\\n            tools : \\\"[{\\\\\\\"type\\\\\\\":\\\\\\\"function\\\\\\\",\\\\\\\"function\\\\\\\":{\\\\\\\"name\\\\\\\":\\\\\\\"web_search\\\\\\\",\\\\\\\"description\\\\\\\":\\\\\\\"Search the internet\\\\\\\",\\\\\\\"parameters\\\\\\\":{\\\\\\\"type\\\\\\\":\\\\\\\"object\\\\\\\",\\\\\\\"properties\\\\\\\":{\\\\\\\"query\\\\\\\":{\\\\\\\"type\\\\\\\":\\\\\\\"string\\\\\\\",\\\\\\\"description\\\\\\\":\\\\\\\"Search query\\\\\\\"}},\\\\\\\"required\\\\\\\":[\\\\\\\"query\\\\\\\"]}}},{\\\\\\\"type\\\\\\\":\\\\\\\"function\\\\\\\",\\\\\\\"function\\\\\\\":{\\\\\\\"name\\\\\\\":\\\\\\\"code_interpreter\\\\\\\",\\\\\\\"description\\\\\\\":\\\\\\\"Evaluates python code in a sandbox environment. The environment resets on every execution. You must send the whole script every time and print your outputs. Script should be pure python code that can be evaluated. It should be in python format NOT markdown. The code should NOT be wrapped in backticks. All python packages including requests, matplotlib, scipy, numpy, pandas, etc are available. Output can only be read from stdout, and stdin. Do not use things like plot.show() as it will not work. print() any output and results so you can capture the output.\\\\\\\",\\\\\\\"parameters\\\\\\\":{\\\\\\\"type\\\\\\\":\\\\\\\"object\\\\\\\",\\\\\\\"properties\\\\\\\":{\\\\\\\"code\\\\\\\":{\\\\\\\"type\\\\\\\":\\\\\\\"string\\\\\\\",\\\\\\\"description\\\\\\\":\\\\\\\"The pure python script to be evaluated. The contents will be in main.py. It should not be in markdown format.\\\\\\\"}},\\\\\\\"required\\\\\\\":[\\\\\\\"code\\\\\\\"]}}}]\\\",\\n            toolChoice : \\\"auto\\\", // \\\"none\\\" or \\\"auto\\\"\\n            user : \\\"\\\" // null\\n        });\\n    }\\n\\n    // @notice Ensures the caller is the contract owner\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Caller is not owner\\\");\\n        _;\\n    }\\n\\n    // @notice Ensures the caller is the oracle contract\\n    modifier onlyOracle() {\\n        require(msg.sender == oracleAddress, \\\"Caller is not oracle\\\");\\n        _;\\n    }\\n\\n    // @notice Sets a new oracle address\\n    // @param newOracleAddress The new oracle address\\n    function setOracleAddress(address newOracleAddress) public onlyOwner {\\n        oracleAddress = newOracleAddress;\\n        emit OracleAddressUpdated(newOracleAddress);\\n    }\\n\\n    // @notice Starts a new chat\\n    // @param message The initial message to start the chat with\\n    // @return The ID of the newly created chat\\n    function startChat(string memory message) public returns (uint) {\\n        ChatRun storage run = chatRuns[chatRunsCount];\\n\\n        run.owner = msg.sender;\\n        Message memory newMessage = Message({\\n            role: \\\"user\\\",\\n            content: message\\n        });\\n        run.messages.push(newMessage);\\n        run.messagesCount = 1;\\n\\n        uint currentId = chatRunsCount;\\n        chatRunsCount++;\\n\\n        IOracle(oracleAddress).createLlmCall(currentId, config);\\n        emit ChatCreated(msg.sender, currentId);\\n\\n        return currentId;\\n    }\\n\\n    // @notice Handles the response from the oracle for an LLM call\\n    // @param runId The ID of the chat run\\n    // @param response The response from the oracle\\n    // @dev Called by teeML oracle\\n    function onOracleLlmResponse(\\n        uint runId,\\n        IOracle.LlmResponse memory response,\\n        string memory errorMessage\\n    ) public onlyOracle {\\n        ChatRun storage run = chatRuns[runId];\\n        require(\\n            compareStrings(run.messages[run.messagesCount - 1].role, \\\"user\\\"),\\n            \\\"No message to respond to\\\"\\n        );\\n\\n        if (!compareStrings(errorMessage, \\\"\\\")) {\\n            Message memory newMessage = Message({\\n                role: \\\"assistant\\\",\\n                content: errorMessage\\n            });\\n            run.messages.push(newMessage);\\n            run.messagesCount++;\\n        } else {\\n            if (!compareStrings(response.functionName, \\\"\\\")) {\\n                toolRunning[runId] = response.functionName;\\n                IOracle(oracleAddress).createFunctionCall(runId, response.functionName, response.functionArguments);\\n            } else {\\n                toolRunning[runId] = \\\"\\\";\\n            }\\n            Message memory newMessage = Message({\\n                role: \\\"assistant\\\",\\n                content: response.content\\n            });\\n            run.messages.push(newMessage);\\n            run.messagesCount++;\\n        }\\n    }\\n\\n    // @notice Handles the response from the oracle for a function call\\n    // @param runId The ID of the chat run\\n    // @param response The response from the oracle\\n    // @param errorMessage Any error message\\n    // @dev Called by teeML oracle\\n    function onOracleFunctionResponse(\\n        uint runId,\\n        string memory response,\\n        string memory errorMessage\\n    ) public onlyOracle {\\n        require(\\n            !compareStrings(toolRunning[runId], \\\"\\\"),\\n            \\\"No function to respond to\\\"\\n        );\\n        ChatRun storage run = chatRuns[runId];\\n        if (compareStrings(errorMessage, \\\"\\\")) {\\n            Message memory newMessage = Message({\\n                role: \\\"user\\\",\\n                content: response\\n            });\\n            run.messages.push(newMessage);\\n            run.messagesCount++;\\n            IOracle(oracleAddress).createLlmCall(runId, config);\\n        }\\n    }\\n\\n    // @notice Handles the response from the oracle for a knowledge base query\\n    // @param runId The ID of the chat run\\n    // @param documents The array of retrieved documents\\n    // @dev Called by teeML oracle\\n    function onOracleKnowledgeBaseQueryResponse(\\n        uint runId,\\n        string[] memory documents,\\n        string memory /*errorMessage*/\\n    ) public onlyOracle {\\n        ChatRun storage run = chatRuns[runId];\\n        require(\\n            compareStrings(run.messages[run.messagesCount - 1].role, \\\"user\\\"),\\n            \\\"No message to add context to\\\"\\n        );\\n        Message storage lastMessage = run.messages[run.messagesCount - 1];\\n\\n        string memory newContent = lastMessage.content;\\n\\n        // Append \\\"Relevant context:\\\\n\\\" only if there are documents\\n        if (documents.length > 0) {\\n            newContent = string(abi.encodePacked(newContent, \\\"\\\\n\\\\nRelevant context:\\\\n\\\"));\\n        }\\n\\n        // Iterate through the documents and append each to the newContent\\n        for (uint i = 0; i < documents.length; i++) {\\n            newContent = string(abi.encodePacked(newContent, documents[i], \\\"\\\\n\\\"));\\n        }\\n\\n        lastMessage.content = newContent;\\n\\n        // Call LLM\\n        IOracle(oracleAddress).createLlmCall(runId, config);\\n    }\\n\\n    // @notice Adds a new message to an existing chat run\\n    // @param message The new message to add\\n    // @param runId The ID of the chat run\\n    function addMessage(string memory message, uint runId) public { // onlyOwnerOrWhitelisted\\n        ChatRun storage run = chatRuns[runId];\\n        require(\\n            compareStrings(run.messages[run.messagesCount - 1].role, \\\"assistant\\\"),\\n            \\\"No response to previous message\\\"\\n        );\\n        require(\\n            run.owner == msg.sender, \\\"Only chat owner can add messages\\\"\\n        );\\n\\n        Message memory newMessage = Message({\\n            role: \\\"user\\\",\\n            content: message\\n        });\\n        run.messages.push(newMessage);\\n        run.messagesCount++;\\n        // If there is a knowledge base, create a knowledge base query\\n        if (bytes(knowledgeBase).length > 0) {\\n            IOracle(oracleAddress).createKnowledgeBaseQuery(\\n                runId,\\n                knowledgeBase,\\n                message,\\n                3\\n            );\\n        } else {\\n            // Otherwise, create an LLM call\\n            IOracle(oracleAddress).createLlmCall(runId, config);\\n        }\\n    }\\n\\n    function getMessageHistoryContents(uint chatId) public view returns (string[] memory) {\\n        ChatRun storage run = chatRuns[chatId];\\n        string[] memory contents = new string[](run.messagesCount);\\n        for (uint i = 0; i < run.messagesCount; i++) {\\n            contents[i] = run.messages[i].content;\\n        }\\n        return contents;\\n    }\\n\\n    function getMessageHistoryRoles(uint chatId) public view returns (string[] memory) {\\n        ChatRun storage run = chatRuns[chatId];\\n        string[] memory roles = new string[](run.messagesCount);\\n        for (uint i = 0; i < run.messagesCount; i++) {\\n            roles[i] = run.messages[i].role;\\n        }\\n        return roles;\\n    }\\n\\n    // @notice Compares two strings for equality\\n    // @param a The first string\\n    // @param b The second string\\n    // @return True if the strings are equal, false otherwise\\n    function compareStrings(string memory a, string memory b) private pure returns (bool) {\\n        return (keccak256(abi.encodePacked((a))) == keccak256(abi.encodePacked((b))));\\n    }\\n}\\n\",\"keccak256\":\"0x367fa0b421e310cd09e1f4a2a179a5f4ddad750a25fde70bf85fcd35cefc0663\",\"license\":\"UNLICENSED\"},\"contracts/LeadAgent.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\n// Uncomment this line to use console.log\\n// import \\\"hardhat/console.sol\\\";\\nimport \\\"./interfaces/IOracle.sol\\\";\\nimport \\\"./interfaces/IOpenAiChatGpt.sol\\\";\\nimport \\\"./factories/TechAgentFactory.sol\\\";\\nimport \\\"./factories/SocialAgentFactory.sol\\\";\\nimport \\\"./factories/DataAgentFactory.sol\\\";\\n\\ncontract LeadAgent {\\n\\n    string public prompt;\\n\\n    struct Message {\\n        string role;\\n        string content;\\n    }\\n\\n    struct AgentRun {\\n        address owner;\\n        Message[] commands;\\n        uint responsesCount;\\n        uint8 max_iterations;\\n        bool is_finished;\\n    }\\n\\n    mapping(uint => AgentRun) public agentRuns;\\n    uint private agentRunCount;\\n\\n    event AgentRunCreated(address indexed owner, uint indexed runId);\\n\\n    address private owner;\\n    address public oracleAddress;\\n\\n    event OracleAddressUpdated(address indexed newOracleAddress);\\n\\n    IOracle.OpenAiRequest private config;\\n\\n    IOpenAiChatGpt public techAgent;\\n    IOpenAiChatGpt public socialAgent;\\n    IOpenAiChatGpt public dataAgent;\\n\\n    constructor(\\n        address initialOracleAddress,         \\n        string memory systemPrompt,\\n        address techAgentFactoryAddress,\\n        address socialAgentFactoryAddress,\\n        address dataAgentFactoryAddress\\n    ) {\\n        owner = msg.sender;\\n        oracleAddress = initialOracleAddress;\\n        prompt = systemPrompt;\\n\\n        // Deploy sub-agents using factories\\n        techAgent = IOpenAiChatGpt(TechAgentFactory(techAgentFactoryAddress).createTechAgent(oracleAddress));\\n        socialAgent = IOpenAiChatGpt(SocialAgentFactory(socialAgentFactoryAddress).createSocialAgent(oracleAddress));\\n        dataAgent = IOpenAiChatGpt(DataAgentFactory(dataAgentFactoryAddress).createDataAgent(oracleAddress));\\n\\n        config = IOracle.OpenAiRequest({\\n            model : \\\"gpt-4-turbo-preview\\\",\\n            frequencyPenalty : 21, // > 20 for null\\n            logitBias : \\\"\\\", // empty str for null\\n            maxTokens : 1000, // 0 for null\\n            presencePenalty : 21, // > 20 for null\\n            responseFormat : \\\"{\\\\\\\"type\\\\\\\":\\\\\\\"text\\\\\\\"}\\\",\\n            seed : 0, // null\\n            stop : \\\"\\\", // null\\n            temperature : 10, // Example temperature (scaled up, 10 means 1.0), > 20 means null\\n            topP : 101, // Percentage 0-100, > 100 means null\\n            tools : \\\"[{\\\\\\\"type\\\\\\\":\\\\\\\"function\\\\\\\",\\\\\\\"function\\\\\\\":{\\\\\\\"name\\\\\\\":\\\\\\\"web_search\\\\\\\",\\\\\\\"description\\\\\\\":\\\\\\\"Search the internet\\\\\\\",\\\\\\\"parameters\\\\\\\":{\\\\\\\"type\\\\\\\":\\\\\\\"object\\\\\\\",\\\\\\\"properties\\\\\\\":{\\\\\\\"query\\\\\\\":{\\\\\\\"type\\\\\\\":\\\\\\\"string\\\\\\\",\\\\\\\"description\\\\\\\":\\\\\\\"Search query\\\\\\\"}},\\\\\\\"required\\\\\\\":[\\\\\\\"query\\\\\\\"]}}},{\\\\\\\"type\\\\\\\":\\\\\\\"function\\\\\\\",\\\\\\\"function\\\\\\\":{\\\\\\\"name\\\\\\\":\\\\\\\"image_generation\\\\\\\",\\\\\\\"description\\\\\\\":\\\\\\\"Generates an image using Dalle-2\\\\\\\",\\\\\\\"parameters\\\\\\\":{\\\\\\\"type\\\\\\\":\\\\\\\"object\\\\\\\",\\\\\\\"properties\\\\\\\":{\\\\\\\"prompt\\\\\\\":{\\\\\\\"type\\\\\\\":\\\\\\\"string\\\\\\\",\\\\\\\"description\\\\\\\":\\\\\\\"Dalle-2 prompt to generate an image\\\\\\\"}},\\\\\\\"required\\\\\\\":[\\\\\\\"prompt\\\\\\\"]}}}]\\\",\\n            toolChoice : \\\"auto\\\", // \\\"none\\\" or \\\"auto\\\"\\n            user : \\\"\\\" // null\\n        });\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Caller is not owner\\\");\\n        _;\\n    }\\n\\n    modifier onlyOracle() {\\n        require(msg.sender == oracleAddress, \\\"Caller is not oracle\\\");\\n        _;\\n    }\\n\\n    function setOracleAddress(address newOracleAddress) public onlyOwner {\\n        require(msg.sender == owner, \\\"Caller is not the owner\\\");\\n        oracleAddress = newOracleAddress;\\n        emit OracleAddressUpdated(newOracleAddress);\\n    }\\n\\n    function runAgent(\\n        string memory query, \\n        uint8 max_iterations, \\n        string memory techAgentPrompt,\\n        string memory socialAgentPrompt,\\n        string memory dataAgentPrompt\\n    ) public returns (uint) {\\n        uint currentId = agentRunCount;\\n        AgentRun storage run = agentRuns[currentId];\\n\\n        run.owner = msg.sender;\\n        run.is_finished = false;\\n        run.responsesCount = 0;\\n        run.max_iterations = max_iterations;\\n\\n        // Initialize sub-agents with prompts\\n        techAgent.startChat(techAgentPrompt);\\n        socialAgent.startChat(socialAgentPrompt);\\n        dataAgent.startChat(dataAgentPrompt);\\n\\n        Message memory systemMessage;\\n        systemMessage.content = prompt;\\n        systemMessage.role = \\\"system\\\";\\n        run.commands.push(systemMessage);\\n\\n        Message memory newMessage;\\n        newMessage.content = query;\\n        newMessage.role = \\\"user\\\";\\n        run.commands.push(newMessage);\\n\\n        agentRunCount = agentRunCount + 1;\\n\\n        IOracle(oracleAddress).createOpenAiLlmCall(currentId, config);\\n        emit AgentRunCreated(run.owner, currentId);\\n\\n        return currentId;\\n    }\\n\\n    function onOracleOpenAiLlmResponse(\\n        uint runId,\\n        IOracle.OpenAiResponse memory response,\\n        string memory errorMessage\\n    ) public onlyOracle {\\n        AgentRun storage run = agentRuns[runId];\\n\\n        // If there is an error message, add it to the commands and mark the run as finished\\n        if (!compareStrings(errorMessage, \\\"\\\")) {\\n            Message memory newMessage;\\n            newMessage.role = \\\"assistant\\\";\\n            newMessage.content = errorMessage;\\n            run.commands.push(newMessage);\\n            run.responsesCount++;\\n            run.is_finished = true;\\n            return;\\n        }\\n\\n        // If there is a response content, add it to the commands\\n        if (!compareStrings(response.content, \\\"\\\")) {\\n            Message memory assistantMessage;\\n            assistantMessage.content = response.content;\\n            assistantMessage.role = \\\"assistant\\\";\\n            run.commands.push(assistantMessage);\\n            run.responsesCount++;\\n\\n            if (startsWith(response.content, \\\"TechAgent do:\\\")) {\\n                techAgent.addMessage(response.content, runId);\\n            } else if (startsWith(response.content, \\\"SocialAgent do:\\\")) {\\n                socialAgent.addMessage(response.content, runId);\\n            } else if (startsWith(response.content, \\\"DataAgent do:\\\")) {\\n                dataAgent.addMessage(response.content, runId);\\n            }\\n        }\\n\\n        // If there is a function name in the response, initiate a function call\\n        if (!compareStrings(response.functionName, \\\"\\\")) {\\n            IOracle(oracleAddress).createFunctionCall(runId, response.functionName, response.functionArguments);\\n            return;\\n        }\\n\\n        // If the maximum number of iterations is reached, mark the run as finished\\n        if (run.responsesCount >= run.max_iterations) {\\n            run.is_finished = true;\\n            return;\\n        }\\n\\n        // Do not call createOpenAiLlmCall here, wait for user input\\n    }\\n\\n    function onOracleFunctionResponse(\\n        uint runId,\\n        string memory response,\\n        string memory errorMessage\\n    ) public onlyOracle {\\n        AgentRun storage run = agentRuns[runId];\\n        require(\\n            !run.is_finished, \\\"Run is finished\\\"\\n        );\\n        string memory result = response;\\n        if (!compareStrings(errorMessage, \\\"\\\")) {\\n            result = errorMessage;\\n        }\\n        Message memory newMessage;\\n        newMessage.role = \\\"user\\\";\\n        newMessage.content = result;\\n        run.commands.push(newMessage);\\n        run.responsesCount++;\\n        IOracle(oracleAddress).createOpenAiLlmCall(runId, config);\\n    }\\n\\n    function getMessageHistoryContents(uint agentId) public view returns (string[] memory) {\\n        string[] memory commands = new string[](agentRuns[agentId].commands.length);\\n        for (uint i = 0; i < agentRuns[agentId].commands.length; i++) {\\n            commands[i] = agentRuns[agentId].commands[i].content;\\n        }\\n        return commands;\\n    }\\n\\n    function getMessageHistoryRoles(uint agentId) public view returns (string[] memory) {\\n        string[] memory roles = new string[](agentRuns[agentId].commands.length);\\n        for (uint i = 0; i < agentRuns[agentId].commands.length; i++) {\\n            roles[i] = agentRuns[agentId].commands[i].role;\\n        }\\n        return roles;\\n    }\\n\\n    function isRunFinished(uint runId) public view returns (bool) {\\n        return agentRuns[runId].is_finished;\\n    }\\n\\n    function compareStrings(string memory a, string memory b) private pure returns (bool) {\\n        return (keccak256(abi.encodePacked((a))) == keccak256(abi.encodePacked((b))));\\n    }\\n\\n    // Add helper functions\\n    function startsWith(string memory str, string memory prefix) private pure returns (bool) {\\n        return keccak256(abi.encodePacked(substring(str, 0, bytes(prefix).length))) == keccak256(abi.encodePacked(prefix));\\n    }\\n\\n    function substring(string memory str, uint startIndex, uint endIndex) private pure returns (string memory) {\\n        bytes memory strBytes = bytes(str);\\n        bytes memory result = new bytes(endIndex - startIndex);\\n        for (uint i = startIndex; i < endIndex; i++) {\\n            result[i - startIndex] = strBytes[i];\\n        }\\n        return string(result);\\n    }\\n\\n    // @notice Adds a new message to an existing agent run\\n    // @param message The new message to add\\n    // @param runId The ID of the agent run\\n    function addMessage(string memory message, uint runId) public {\\n        AgentRun storage run = agentRuns[runId];\\n        require(!run.is_finished, \\\"Run is finished\\\");\\n        require(run.owner == msg.sender, \\\"Only run owner can add commands\\\");\\n\\n        Message memory newMessage;\\n        newMessage.role = \\\"user\\\";\\n        newMessage.content = message;\\n        run.commands.push(newMessage);\\n        run.responsesCount++;\\n\\n        // Continue the agent run by making another OpenAI LLM call\\n        IOracle(oracleAddress).createOpenAiLlmCall(runId, config);\\n    }\\n}\\n\",\"keccak256\":\"0x9552dca43b6152f1c0d4a0d357301f30b012bb6509c8533dd7dfadbe390117f5\",\"license\":\"UNLICENSED\"},\"contracts/SocialAgent.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport \\\"./BaseAgent.sol\\\";\\n\\ncontract SocialAgent is BaseAgent {\\n    constructor(address initialOracleAddress) BaseAgent(initialOracleAddress) {}\\n}\",\"keccak256\":\"0xc887dd35d7c404c94c24db12dd7a7d69b17337da3cbbbd9926fb125686208e0d\",\"license\":\"UNLICENSED\"},\"contracts/TechAgent.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport \\\"./BaseAgent.sol\\\";\\n\\ncontract TechAgent is BaseAgent {\\n    constructor(address initialOracleAddress) BaseAgent(initialOracleAddress) {}\\n}\",\"keccak256\":\"0x5bdda6d52d259cbab2bd636c7466290a812f1f29503b586fb489cece53121046\",\"license\":\"UNLICENSED\"},\"contracts/factories/DataAgentFactory.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport \\\"../DataAgent.sol\\\";\\n\\ncontract DataAgentFactory {\\n    function createDataAgent(address oracleAddress) external returns (address) {\\n        DataAgent dataAgent = new DataAgent(oracleAddress);\\n        dataAgent.addToWhitelist(msg.sender);\\n        return address(dataAgent);\\n    }\\n}\",\"keccak256\":\"0x6c139d5e2964f08df2ecade54b68ebfd4df8e5a9aca0293ab903225b23c1b977\",\"license\":\"UNLICENSED\"},\"contracts/factories/SocialAgentFactory.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport \\\"../SocialAgent.sol\\\";\\n\\ncontract SocialAgentFactory {\\n    function createSocialAgent(address oracleAddress) external returns (address) {\\n        SocialAgent socialAgent = new SocialAgent(oracleAddress);\\n        socialAgent.addToWhitelist(msg.sender);\\n        return address(socialAgent);\\n    }\\n}\",\"keccak256\":\"0xeac65a7a8aa225ae50b25e2f1abd276ad5e31e2d12369d8e71792cd9bbf2cab6\",\"license\":\"UNLICENSED\"},\"contracts/factories/TechAgentFactory.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport \\\"../TechAgent.sol\\\";\\n\\ncontract TechAgentFactory {\\n    function createTechAgent(address oracleAddress) external returns (address) {\\n        TechAgent techAgent = new TechAgent(oracleAddress);\\n        techAgent.addToWhitelist(msg.sender);\\n        return address(techAgent);\\n    }\\n}\",\"keccak256\":\"0x9c0ff97c41c44d3c6883841adf15e742ca893d1a2ed838efff545aef60db647a\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IOpenAiChatGpt.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\ninterface IOpenAiChatGpt {\\n    function addMessage(string memory message, uint runId) external;\\n    function startChat(string memory message) external returns (uint);\\n}\",\"keccak256\":\"0x3dc1f3f72bca2342ef1d12a051e00201a22964b50afaae1c2950b898f57de465\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\ninterface IOracle {\\n\\n    struct Content {\\n        string contentType;\\n        string value;\\n    }\\n\\n    struct Message {\\n        string role;\\n        Content [] content;\\n    }\\n\\n    struct OpenAiRequest {\\n        // \\\"gpt-4-turbo\\\", \\\"gpt-4-turbo-preview\\\" or \\\"gpt-3.5-turbo-1106\\\"\\n        string model;\\n        // int -20 - 20, Mapped to float -2.0 - 2.0. If bigger than 20 then null\\n        int8 frequencyPenalty;\\n        // JSON string or empty string\\n        string logitBias;\\n        // 0 for null\\n        uint32 maxTokens;\\n        // int -20 - 20, Mapped to float -2.0 - 2.0. If bigger than 20 then null\\n        int8 presencePenalty;\\n        // JSON string or empty string\\n        string responseFormat;\\n        // 0 for null\\n        uint seed;\\n        // empty str for null\\n        string stop;\\n        // 0-20, > 20 for null\\n        uint temperature;\\n        // 0-100  percentage, > 100 for null\\n        uint topP;\\n        // JSON list for tools in OpenAI format, empty for null, names have to match the supported tools\\n        string tools;\\n        // \\\"none\\\", \\\"auto\\\" or empty str which defaults to auto on OpenAI side\\n        string toolChoice;\\n        string user;\\n    }\\n\\n    struct OpenAiResponse {\\n        string id;\\n\\n        // either content is an empty str or functionName and functionArguments\\n        string content;\\n        string functionName;\\n        string functionArguments;\\n\\n        uint64 created;\\n        string model;\\n        string systemFingerprint;\\n        // kind of pointless since its always \\\"chat.completion\\\"?\\n        string object;\\n\\n        uint32 completionTokens;\\n        uint32 promptTokens;\\n        uint32 totalTokens;\\n    }\\n\\n    struct GroqRequest {\\n        // \\\"llama3-8b-8192\\\", \\\"llama3-70b-8192\\\", \\\"mixtral-8x7b-32768\\\" or \\\"gemma-7b-it\\\"\\n        string model;\\n        // int -20 - 20, Mapped to float -2.0 - 2.0. If bigger than 20 then null\\n        int8 frequencyPenalty;\\n        // JSON string or empty string\\n        string logitBias;\\n        // 0 for null\\n        uint32 maxTokens;\\n        // int -20 - 20, Mapped to float -2.0 - 2.0. If bigger than 20 then null\\n        int8 presencePenalty;\\n        // JSON string or empty string\\n        string responseFormat;\\n        // 0 for null\\n        uint seed;\\n        // empty str for null\\n        string stop;\\n        // 0-20, > 20 for null\\n        uint temperature;\\n        // 0-100  percentage, > 100 for null\\n        uint topP;\\n        string user;\\n    }\\n\\n    struct GroqResponse {\\n        string id;\\n\\n        string content;\\n\\n        uint64 created;\\n        string model;\\n        string systemFingerprint;\\n        // kind of pointless since its always \\\"chat.completion\\\"?\\n        string object;\\n\\n        uint32 completionTokens;\\n        uint32 promptTokens;\\n        uint32 totalTokens;\\n    }\\n\\n    struct LlmRequest {\\n        // \\\"claude-3-5-sonnet-20240620\\\", \\\"claude-3-opus-20240229\\\", \\\"claude-3-sonnet-20240229\\\", \\\"claude-3-haiku-20240307\\\", \\\"claude-2.1\\\", \\\"claude-2.0\\\", \\\"claude-instant-1.2\\\"\\n        string model;\\n        // int -20 - 20, Mapped to float -2.0 - 2.0. If bigger than 20 then null\\n        int8 frequencyPenalty;\\n        // JSON string or empty string\\n        string logitBias;\\n        // 0 for null\\n        uint32 maxTokens;\\n        // int -20 - 20, Mapped to float -2.0 - 2.0. If bigger than 20 then null\\n        int8 presencePenalty;\\n        // JSON string or empty string\\n        string responseFormat;\\n        // 0 for null\\n        uint seed;\\n        // empty str for null\\n        string stop;\\n        // 0-20, > 20 for null\\n        uint temperature;\\n        // 0-100  percentage, > 100 for null\\n        uint topP;\\n        // JSON list for tools in OpenAI format, empty for null, names have to match the supported tools\\n        string tools;\\n        // \\\"none\\\", \\\"auto\\\" or empty str which defaults to auto on OpenAI side\\n        string toolChoice;\\n        string user;\\n    }\\n\\n    struct LlmResponse {\\n        string id;\\n\\n        // either content is an empty str or functionName and functionArguments\\n        string content;\\n        string functionName;\\n        string functionArguments;\\n\\n        uint64 created;\\n        string model;\\n        string systemFingerprint;\\n        // kind of pointless since its always \\\"chat.completion\\\"?\\n        string object;\\n\\n        uint32 completionTokens;\\n        uint32 promptTokens;\\n        uint32 totalTokens;\\n    }\\n\\n\\n    struct KnowledgeBaseQueryRequest {\\n        string cid;\\n        string query;\\n        uint32 num_documents;\\n    }\\n\\n    function createLlmCall(\\n        uint promptId\\n    ) external returns (uint);\\n\\n    function createLlmCall(\\n        uint promptId,\\n        LlmRequest memory request\\n    ) external returns (uint);\\n\\n    function createGroqLlmCall(\\n        uint promptId,\\n        GroqRequest memory request\\n    ) external returns (uint);\\n\\n    function createOpenAiLlmCall(\\n        uint promptId,\\n        OpenAiRequest memory request\\n    ) external returns (uint);\\n\\n    function createFunctionCall(\\n        uint functionCallbackId,\\n        string memory functionType,\\n        string memory functionInput\\n    ) external returns (uint i);\\n\\n    function createKnowledgeBaseQuery(\\n        uint kbQueryCallbackId,\\n        string memory cid,\\n        string memory query,\\n        uint32 num_documents\\n    ) external returns (uint i);\\n}\",\"keccak256\":\"0x1283962849594f93cf3b48d55414e6ede750fde3dd4e2775f2f6a774a3852296\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200268538038062002685833981016040819052620000349162000475565b60038054336001600160a01b031991821617909155600480549091166001600160a01b03871617905560006200006b858262000625565b506004805460405163e2079a8360e01b81526001600160a01b039182169281019290925284169063e2079a83906024016020604051808303816000875af1158015620000bb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000e19190620006f1565b601180546001600160a01b0319166001600160a01b0392831617905560048054604051630323981f60e11b81529083169181019190915290831690630647303e906024016020604051808303816000875af115801562000145573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200016b9190620006f1565b601280546001600160a01b0319166001600160a01b0392831617905560048054604051636fe93b6560e11b8152908316918101919091529082169063dfd276ca906024016020604051808303816000875af1158015620001cf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001f59190620006f1565b601380546001600160a01b0319166001600160a01b0392909216919091178155604080516101e0810182526101a081019283527f6770742d342d747572626f2d70726576696577000000000000000000000000006101c082015291825260156020808401829052825180820184526000808252858501919091526103e86060860152608085019290925282518084018452600f81526e7b2274797065223a2274657874227d60881b8183015260a085015260c084018290528251808201845291825260e0840191909152600a6101008401526065610120840152815161020081019092526101d380835261014084019291620024b290830139815260408051808201825260048152636175746f60e01b6020828101919091528084019190915281519081018252600081529101528051600590819062000336908262000625565b50602082015160018201805460ff191660ff9092169190911790556040820151600282019062000367908262000625565b506060820151600382018054608085015160ff166401000000000264ffffffffff1990911663ffffffff9093169290921791909117905560a08201516004820190620003b4908262000625565b5060c0820151600582015560e08201516006820190620003d5908262000625565b5061010082015160078201556101208201516008820155610140820151600982019062000403908262000625565b50610160820151600a8201906200041b908262000625565b50610180820151600b82019062000433908262000625565b50905050505050505062000716565b80516001600160a01b03811681146200045a57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600080600080600060a086880312156200048e57600080fd5b620004998662000442565b602087810151919650906001600160401b0380821115620004b957600080fd5b818901915089601f830112620004ce57600080fd5b815181811115620004e357620004e36200045f565b604051601f8201601f19908116603f011681019083821181831017156200050e576200050e6200045f565b816040528281528c868487010111156200052757600080fd5b600093505b828410156200054b57848401860151818501870152928501926200052c565b60008684830101528099505050505050506200056a6040870162000442565b92506200057a6060870162000442565b91506200058a6080870162000442565b90509295509295909350565b600181811c90821680620005ab57607f821691505b602082108103620005cc57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200062057600081815260208120601f850160051c81016020861015620005fb5750805b601f850160051c820191505b818110156200061c5782815560010162000607565b5050505b505050565b81516001600160401b038111156200064157620006416200045f565b620006598162000652845462000596565b84620005d2565b602080601f831160018114620006915760008415620006785750858301515b600019600386901b1c1916600185901b1785556200061c565b600085815260208120601f198616915b82811015620006c257888601518255948401946001909101908401620006a1565b5085821015620006e15787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000602082840312156200070457600080fd5b6200070f8262000442565b9392505050565b611d8c80620007266000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80637c65d7111161008c578063b75f07e411610066578063b75f07e414610204578063c63b029514610217578063eb17429a14610290578063ed6e39e5146102b057600080fd5b80637c65d711146101c9578063941fac37146101de578063a89ae4ba146101f157600080fd5b80634cecd88e116100c85780634cecd88e1461016f57806355670675146101825780635923400b146101a35780637397454d146101b657600080fd5b806304495a3b146100ef5780632eab9c811461011f5780634c69c00f1461015a575b600080fd5b601154610102906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61014a61012d36600461145f565b600090815260016020526040902060030154610100900460ff1690565b6040519015158152602001610116565b61016d610168366004611478565b6102c3565b005b61016d61017d3660046115a6565b6103bc565b610195610190366004611761565b61082d565b604051908152602001610116565b601354610102906001600160a01b031681565b61016d6101c4366004611829565b610c26565b6101d1610e07565b60405161011691906118cf565b61016d6101ec3660046118e2565b610e95565b600454610102906001600160a01b031681565b601254610102906001600160a01b031681565b61025c61022536600461145f565b6001602052600090815260409020805460028201546003909201546001600160a01b03909116919060ff8082169161010090041684565b604080516001600160a01b039095168552602085019390935260ff9091169183019190915215156060820152608001610116565b6102a361029e36600461145f565b61100d565b6040516101169190611927565b6102a36102be36600461145f565b611183565b6003546001600160a01b031633146103185760405162461bcd60e51b815260206004820152601360248201527221b0b63632b91034b9903737ba1037bbb732b960691b60448201526064015b60405180910390fd5b6003546001600160a01b031633146103725760405162461bcd60e51b815260206004820152601760248201527f43616c6c6572206973206e6f7420746865206f776e6572000000000000000000604482015260640161030f565b600480546001600160a01b0319166001600160a01b0383169081179091556040517f107a9fafffb7ac890f780879e423760c9ffea8dcee8045681f40f542aede2cb890600090a250565b6004546001600160a01b0316331461040d5760405162461bcd60e51b815260206004820152601460248201527343616c6c6572206973206e6f74206f7261636c6560601b604482015260640161030f565b600083815260016020908152604080832081519283019091529181526104349083906112f2565b6104e6576040805180820182526060808252602080830191825283518085019094526009845268185cdcda5cdd185b9d60ba1b8482015292825284905260018381018054918201815560009081529290922081519192839260029091029091019081906104a19082611a11565b50602082015160018201906104b69082611a11565b5050506002820180549060006104cb83611ae7565b909155505050600301805461ff001916610100179055505050565b6105038360200151604051806020016040528060008152506112f2565b61075657604080518082019091526060808252602082015260208085015182820152604080518082019091526009815268185cdcda5cdd185b9d60ba1b818301528252600180840180549182018155600090815291909120825183926002029091019081906105729082611a11565b50602082015160018201906105879082611a11565b50505060028201805490600061059c83611ae7565b91905055506105d484602001516040518060400160405280600d81526020016c2a32b1b420b3b2b73a1032379d60991b81525061134c565b1561064557601154602085015160405163941fac3760e01b81526001600160a01b039092169163941fac379161060e918990600401611b00565b600060405180830381600087803b15801561062857600080fd5b505af115801561063c573d6000803e3d6000fd5b50505050610754565b61067a84602001516040518060400160405280600f81526020016e29b7b1b4b0b620b3b2b73a1032379d60891b81525061134c565b156106b457601254602085015160405163941fac3760e01b81526001600160a01b039092169163941fac379161060e918990600401611b00565b6106e784602001516040518060400160405280600d81526020016c2230ba30a0b3b2b73a1032379d60991b81525061134c565b1561075457601354602085015160405163941fac3760e01b81526001600160a01b039092169163941fac3791610721918990600401611b00565b600060405180830381600087803b15801561073b57600080fd5b505af115801561074f573d6000803e3d6000fd5b505050505b505b6107738360400151604051806020016040528060008152506112f2565b6107fd576004805460408086015160608701519151634b04236b60e01b81526001600160a01b0390931693634b04236b936107b3938a9392909101611b22565b6020604051808303816000875af11580156107d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f69190611b57565b5050505050565b6003810154600282015460ff9091161161082657600301805461ff001916610100179055505050565b505b505050565b600280546000818152600160205260408082208054336001600160a01b031990911617815560038101805495820184905561ffff1990951660ff8a161790945560115490516316846c1560e11b81529193916001600160a01b0390911690632d08d82a9061089f9089906004016118cf565b6020604051808303816000875af11580156108be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e29190611b57565b506012546040516316846c1560e11b81526001600160a01b0390911690632d08d82a906109139088906004016118cf565b6020604051808303816000875af1158015610932573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109569190611b57565b506013546040516316846c1560e11b81526001600160a01b0390911690632d08d82a906109879087906004016118cf565b6020604051808303816000875af11580156109a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ca9190611b57565b506040805180820190915260608082526020820152600080546109ec90611989565b80601f0160208091040260200160405190810160405280929190818152602001828054610a1890611989565b8015610a655780601f10610a3a57610100808354040283529160200191610a65565b820191906000526020600020905b815481529060010190602001808311610a4857829003601f168201915b505050506020808401929092525060408051808201909152600681526573797374656d60d01b81830152825260018084018054918201815560009081529190912082518392600202909101908190610abd9082611a11565b5060208201516001820190610ad29082611a11565b505050610af2604051806040016040528060608152602001606081525090565b60208082018b90526040805180820190915260048152633ab9b2b960e11b81830152825260018085018054918201815560009081529190912082518392600202909101908190610b429082611a11565b5060208201516001820190610b579082611a11565b5050600254610b6891506001611b70565b60025560048054604051633c38a5f560e01b81526001600160a01b0390911691633c38a5f591610b9d91889160059101611c00565b6020604051808303816000875af1158015610bbc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be09190611b57565b50825460405185916001600160a01b0316907f9697c88a6be3b3ed5062f2dcbd719a10914832320686f14e24f7756210a6685e90600090a3509198975050505050505050565b6004546001600160a01b03163314610c775760405162461bcd60e51b815260206004820152601460248201527343616c6c6572206973206e6f74206f7261636c6560601b604482015260640161030f565b60008381526001602052604090206003810154610100900460ff1615610cd15760405162461bcd60e51b815260206004820152600f60248201526e149d5b881a5cc8199a5b9a5cda1959608a1b604482015260640161030f565b6000839050610cef83604051806020016040528060008152506112f2565b610cf65750815b60408051808201825260608082526020808301918252835180850190945260048452633ab9b2b960e11b848201529282528390526001848101805491820181556000908152929092208151919283926002909102909101908190610d5a9082611a11565b5060208201516001820190610d6f9082611a11565b505050600283018054906000610d8483611ae7565b909155505060048054604051633c38a5f560e01b81526001600160a01b0390911691633c38a5f591610dbb918a9160059101611c00565b6020604051808303816000875af1158015610dda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dfe9190611b57565b50505050505050565b60008054610e1490611989565b80601f0160208091040260200160405190810160405280929190818152602001828054610e4090611989565b8015610e8d5780601f10610e6257610100808354040283529160200191610e8d565b820191906000526020600020905b815481529060010190602001808311610e7057829003601f168201915b505050505081565b60008181526001602052604090206003810154610100900460ff1615610eef5760405162461bcd60e51b815260206004820152600f60248201526e149d5b881a5cc8199a5b9a5cda1959608a1b604482015260640161030f565b80546001600160a01b03163314610f485760405162461bcd60e51b815260206004820152601f60248201527f4f6e6c792072756e206f776e65722063616e2061646420636f6d6d616e647300604482015260640161030f565b60408051808201825260608082526020808301918252835180850190945260048452633ab9b2b960e11b848201529282528590526001838101805491820181556000908152929092208151919283926002909102909101908190610fac9082611a11565b5060208201516001820190610fc19082611a11565b505050600282018054906000610fd683611ae7565b909155505060048054604051633c38a5f560e01b81526001600160a01b0390911691633c38a5f5916107b391879160059101611c00565b6000818152600160208190526040822001546060919067ffffffffffffffff81111561103b5761103b6114a8565b60405190808252806020026020018201604052801561106e57816020015b60608152602001906001900390816110595790505b50905060005b6000848152600160208190526040909120015481101561117c576000848152600160208190526040909120018054829081106110b2576110b2611d11565b906000526020600020906002020160010180546110ce90611989565b80601f01602080910402602001604051908101604052809291908181526020018280546110fa90611989565b80156111475780601f1061111c57610100808354040283529160200191611147565b820191906000526020600020905b81548152906001019060200180831161112a57829003601f168201915b505050505082828151811061115e5761115e611d11565b6020026020010181905250808061117490611ae7565b915050611074565b5092915050565b6000818152600160208190526040822001546060919067ffffffffffffffff8111156111b1576111b16114a8565b6040519080825280602002602001820160405280156111e457816020015b60608152602001906001900390816111cf5790505b50905060005b6000848152600160208190526040909120015481101561117c5760008481526001602081905260409091200180548290811061122857611228611d11565b9060005260206000209060020201600001805461124490611989565b80601f016020809104026020016040519081016040528092919081815260200182805461127090611989565b80156112bd5780601f10611292576101008083540402835291602001916112bd565b820191906000526020600020905b8154815290600101906020018083116112a057829003601f168201915b50505050508282815181106112d4576112d4611d11565b602002602001018190525080806112ea90611ae7565b9150506111ea565b6000816040516020016113059190611d27565b604051602081830303815290604052805190602001208360405160200161132c9190611d27565b604051602081830303815290604052805190602001201490505b92915050565b60008160405160200161135f9190611d27565b604051602081830303815290604052805190602001206113828460008551611392565b60405160200161132c9190611d27565b60608360006113a18585611d43565b67ffffffffffffffff8111156113b9576113b96114a8565b6040519080825280601f01601f1916602001820160405280156113e3576020820181803683370190505b509050845b848110156114555782818151811061140257611402611d11565b01602001516001600160f81b0319168261141c8884611d43565b8151811061142c5761142c611d11565b60200101906001600160f81b031916908160001a9053508061144d81611ae7565b9150506113e8565b5095945050505050565b60006020828403121561147157600080fd5b5035919050565b60006020828403121561148a57600080fd5b81356001600160a01b03811681146114a157600080fd5b9392505050565b634e487b7160e01b600052604160045260246000fd5b604051610160810167ffffffffffffffff811182821017156114e2576114e26114a8565b60405290565b600082601f8301126114f957600080fd5b813567ffffffffffffffff80821115611514576115146114a8565b604051601f8301601f19908116603f0116810190828211818310171561153c5761153c6114a8565b8160405283815286602085880101111561155557600080fd5b836020870160208301376000602085830101528094505050505092915050565b803567ffffffffffffffff8116811461158d57600080fd5b919050565b803563ffffffff8116811461158d57600080fd5b6000806000606084860312156115bb57600080fd5b83359250602084013567ffffffffffffffff808211156115da57600080fd5b9085019061016082880312156115ef57600080fd5b6115f76114be565b82358281111561160657600080fd5b611612898286016114e8565b82525060208301358281111561162757600080fd5b611633898286016114e8565b60208301525060408301358281111561164b57600080fd5b611657898286016114e8565b60408301525060608301358281111561166f57600080fd5b61167b898286016114e8565b60608301525061168d60808401611575565b608082015260a0830135828111156116a457600080fd5b6116b0898286016114e8565b60a08301525060c0830135828111156116c857600080fd5b6116d4898286016114e8565b60c08301525060e0830135828111156116ec57600080fd5b6116f8898286016114e8565b60e08301525061010061170c818501611592565b9082015261012061171e848201611592565b90820152610140611730848201611592565b908201529350604086013591508082111561174a57600080fd5b50611757868287016114e8565b9150509250925092565b600080600080600060a0868803121561177957600080fd5b853567ffffffffffffffff8082111561179157600080fd5b61179d89838a016114e8565b96506020880135915060ff821682146117b557600080fd5b909450604087013590808211156117cb57600080fd5b6117d789838a016114e8565b945060608801359150808211156117ed57600080fd5b6117f989838a016114e8565b9350608088013591508082111561180f57600080fd5b5061181c888289016114e8565b9150509295509295909350565b60008060006060848603121561183e57600080fd5b83359250602084013567ffffffffffffffff8082111561185d57600080fd5b611869878388016114e8565b9350604086013591508082111561174a57600080fd5b60005b8381101561189a578181015183820152602001611882565b50506000910152565b600081518084526118bb81602086016020860161187f565b601f01601f19169290920160200192915050565b6020815260006114a160208301846118a3565b600080604083850312156118f557600080fd5b823567ffffffffffffffff81111561190c57600080fd5b611918858286016114e8565b95602094909401359450505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561197c57603f1988860301845261196a8583516118a3565b9450928501929085019060010161194e565b5092979650505050505050565b600181811c9082168061199d57607f821691505b6020821081036119bd57634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561082857600081815260208120601f850160051c810160208610156119ea5750805b601f850160051c820191505b81811015611a09578281556001016119f6565b505050505050565b815167ffffffffffffffff811115611a2b57611a2b6114a8565b611a3f81611a398454611989565b846119c3565b602080601f831160018114611a745760008415611a5c5750858301515b600019600386901b1c1916600185901b178555611a09565b600085815260208120601f198616915b82811015611aa357888601518255948401946001909101908401611a84565b5085821015611ac15787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b600060018201611af957611af9611ad1565b5060010190565b604081526000611b1360408301856118a3565b90508260208301529392505050565b838152606060208201526000611b3b60608301856118a3565b8281036040840152611b4d81856118a3565b9695505050505050565b600060208284031215611b6957600080fd5b5051919050565b8082018082111561134657611346611ad1565b60008154611b9081611989565b808552602060018381168015611bad5760018114611bc757611bf5565b60ff1985168884015283151560051b880183019550611bf5565b866000528260002060005b85811015611bed5781548a8201860152908301908401611bd2565b890184019650505b505050505092915050565b8281526040602082015260006101a0806040840152611c236101e0840185611b83565b600185015460000b6060850152603f1984820381016080860152611c4a8260028801611b83565b600387015463ffffffff811660a088015260201c60000b60c0870152858103820160e08701529150611c7f8260048801611b83565b915060058601546101008601528085830301610120860152611ca48260068801611b83565b9150600786015461014086015260088601546101608601528085830301610180860152611cd48260098801611b83565b9150808583030183860152611cec82600a8801611b83565b925080858403016101c08601525050611d0881600b8601611b83565b95945050505050565b634e487b7160e01b600052603260045260246000fd5b60008251611d3981846020870161187f565b9190910192915050565b8181038181111561134657611346611ad156fea26469706673582212201ec707fd971c12c30f0b7efbf9a16f2bf337802ced5236ae27bb29e0d8ce784064736f6c634300081100335b7b2274797065223a2266756e6374696f6e222c2266756e6374696f6e223a7b226e616d65223a227765625f736561726368222c226465736372697074696f6e223a225365617263682074686520696e7465726e6574222c22706172616d6574657273223a7b2274797065223a226f626a656374222c2270726f70657274696573223a7b227175657279223a7b2274797065223a22737472696e67222c226465736372697074696f6e223a22536561726368207175657279227d7d2c227265717569726564223a5b227175657279225d7d7d7d2c7b2274797065223a2266756e6374696f6e222c2266756e6374696f6e223a7b226e616d65223a22696d6167655f67656e65726174696f6e222c226465736372697074696f6e223a2247656e65726174657320616e20696d616765207573696e672044616c6c652d32222c22706172616d6574657273223a7b2274797065223a226f626a656374222c2270726f70657274696573223a7b2270726f6d7074223a7b2274797065223a22737472696e67222c226465736372697074696f6e223a2244616c6c652d322070726f6d707420746f2067656e657261746520616e20696d616765227d7d2c227265717569726564223a5b2270726f6d7074225d7d7d7d5d",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1477,
        "contract": "contracts/LeadAgent.sol:LeadAgent",
        "label": "prompt",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 1500,
        "contract": "contracts/LeadAgent.sol:LeadAgent",
        "label": "agentRuns",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(AgentRun)1495_storage)"
      },
      {
        "astId": 1502,
        "contract": "contracts/LeadAgent.sol:LeadAgent",
        "label": "agentRunCount",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1510,
        "contract": "contracts/LeadAgent.sol:LeadAgent",
        "label": "owner",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 1512,
        "contract": "contracts/LeadAgent.sol:LeadAgent",
        "label": "oracleAddress",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 1519,
        "contract": "contracts/LeadAgent.sol:LeadAgent",
        "label": "config",
        "offset": 0,
        "slot": "5",
        "type": "t_struct(OpenAiRequest)2631_storage"
      },
      {
        "astId": 1522,
        "contract": "contracts/LeadAgent.sol:LeadAgent",
        "label": "techAgent",
        "offset": 0,
        "slot": "17",
        "type": "t_contract(IOpenAiChatGpt)2590"
      },
      {
        "astId": 1525,
        "contract": "contracts/LeadAgent.sol:LeadAgent",
        "label": "socialAgent",
        "offset": 0,
        "slot": "18",
        "type": "t_contract(IOpenAiChatGpt)2590"
      },
      {
        "astId": 1528,
        "contract": "contracts/LeadAgent.sol:LeadAgent",
        "label": "dataAgent",
        "offset": 0,
        "slot": "19",
        "type": "t_contract(IOpenAiChatGpt)2590"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Message)1482_storage)dyn_storage": {
        "base": "t_struct(Message)1482_storage",
        "encoding": "dynamic_array",
        "label": "struct LeadAgent.Message[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IOpenAiChatGpt)2590": {
        "encoding": "inplace",
        "label": "contract IOpenAiChatGpt",
        "numberOfBytes": "20"
      },
      "t_int8": {
        "encoding": "inplace",
        "label": "int8",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_struct(AgentRun)1495_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LeadAgent.AgentRun)",
        "numberOfBytes": "32",
        "value": "t_struct(AgentRun)1495_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AgentRun)1495_storage": {
        "encoding": "inplace",
        "label": "struct LeadAgent.AgentRun",
        "members": [
          {
            "astId": 1484,
            "contract": "contracts/LeadAgent.sol:LeadAgent",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1488,
            "contract": "contracts/LeadAgent.sol:LeadAgent",
            "label": "commands",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_struct(Message)1482_storage)dyn_storage"
          },
          {
            "astId": 1490,
            "contract": "contracts/LeadAgent.sol:LeadAgent",
            "label": "responsesCount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1492,
            "contract": "contracts/LeadAgent.sol:LeadAgent",
            "label": "max_iterations",
            "offset": 0,
            "slot": "3",
            "type": "t_uint8"
          },
          {
            "astId": 1494,
            "contract": "contracts/LeadAgent.sol:LeadAgent",
            "label": "is_finished",
            "offset": 1,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Message)1482_storage": {
        "encoding": "inplace",
        "label": "struct LeadAgent.Message",
        "members": [
          {
            "astId": 1479,
            "contract": "contracts/LeadAgent.sol:LeadAgent",
            "label": "role",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 1481,
            "contract": "contracts/LeadAgent.sol:LeadAgent",
            "label": "content",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(OpenAiRequest)2631_storage": {
        "encoding": "inplace",
        "label": "struct IOracle.OpenAiRequest",
        "members": [
          {
            "astId": 2606,
            "contract": "contracts/LeadAgent.sol:LeadAgent",
            "label": "model",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 2608,
            "contract": "contracts/LeadAgent.sol:LeadAgent",
            "label": "frequencyPenalty",
            "offset": 0,
            "slot": "1",
            "type": "t_int8"
          },
          {
            "astId": 2610,
            "contract": "contracts/LeadAgent.sol:LeadAgent",
            "label": "logitBias",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 2612,
            "contract": "contracts/LeadAgent.sol:LeadAgent",
            "label": "maxTokens",
            "offset": 0,
            "slot": "3",
            "type": "t_uint32"
          },
          {
            "astId": 2614,
            "contract": "contracts/LeadAgent.sol:LeadAgent",
            "label": "presencePenalty",
            "offset": 4,
            "slot": "3",
            "type": "t_int8"
          },
          {
            "astId": 2616,
            "contract": "contracts/LeadAgent.sol:LeadAgent",
            "label": "responseFormat",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 2618,
            "contract": "contracts/LeadAgent.sol:LeadAgent",
            "label": "seed",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 2620,
            "contract": "contracts/LeadAgent.sol:LeadAgent",
            "label": "stop",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          },
          {
            "astId": 2622,
            "contract": "contracts/LeadAgent.sol:LeadAgent",
            "label": "temperature",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 2624,
            "contract": "contracts/LeadAgent.sol:LeadAgent",
            "label": "topP",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 2626,
            "contract": "contracts/LeadAgent.sol:LeadAgent",
            "label": "tools",
            "offset": 0,
            "slot": "9",
            "type": "t_string_storage"
          },
          {
            "astId": 2628,
            "contract": "contracts/LeadAgent.sol:LeadAgent",
            "label": "toolChoice",
            "offset": 0,
            "slot": "10",
            "type": "t_string_storage"
          },
          {
            "astId": 2630,
            "contract": "contracts/LeadAgent.sol:LeadAgent",
            "label": "user",
            "offset": 0,
            "slot": "11",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "384"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}