{
  "address": "0xD5Aebe088c5ba05D1094A3888D9b0474c087fD51",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "initialOracleAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "systemPrompt",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "techAgentFactoryAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "socialAgentFactoryAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dataAgentFactoryAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "runId",
          "type": "uint256"
        }
      ],
      "name": "AgentRunCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOracleAddress",
          "type": "address"
        }
      ],
      "name": "OracleAddressUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "runId",
          "type": "uint256"
        }
      ],
      "name": "addMessage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "agentRunCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "agentRuns",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "targetFirstName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "targetFriend",
          "type": "string"
        },
        {
          "internalType": "enum LeadAgent.Situation",
          "name": "situation",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "situationAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "publicInfo",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "privateInfo",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "groupTitle",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "groupImage",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "groupId",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "responsesCount",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "max_iterations",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "is_finished",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dataAgent",
      "outputs": [
        {
          "internalType": "contract IOpenAiChatGpt",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_creator",
          "type": "address"
        }
      ],
      "name": "getAgentRuns",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "targetFirstName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "targetFriend",
              "type": "string"
            },
            {
              "internalType": "enum LeadAgent.Situation",
              "name": "situation",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "situationAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "publicInfo",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "privateInfo",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "groupTitle",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "groupImage",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "groupId",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "responsesCount",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "max_iterations",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "is_finished",
              "type": "bool"
            }
          ],
          "internalType": "struct LeadAgent.AgentRunInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "agentId",
          "type": "uint256"
        }
      ],
      "name": "getMessageHistoryContents",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "agentId",
          "type": "uint256"
        }
      ],
      "name": "getMessageHistoryRoles",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "runId",
          "type": "uint256"
        }
      ],
      "name": "isRunFinished",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "runId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "response",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "errorMessage",
          "type": "string"
        }
      ],
      "name": "onOracleFunctionResponse",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "runId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "id",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "content",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "functionName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "functionArguments",
              "type": "string"
            },
            {
              "internalType": "uint64",
              "name": "created",
              "type": "uint64"
            },
            {
              "internalType": "string",
              "name": "model",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "systemFingerprint",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "object",
              "type": "string"
            },
            {
              "internalType": "uint32",
              "name": "completionTokens",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "promptTokens",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "totalTokens",
              "type": "uint32"
            }
          ],
          "internalType": "struct IOracle.OpenAiResponse",
          "name": "response",
          "type": "tuple"
        },
        {
          "internalType": "string",
          "name": "errorMessage",
          "type": "string"
        }
      ],
      "name": "onOracleOpenAiLlmResponse",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "prompt",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "query",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "max_iterations",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "techAgentPrompt",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "socialAgentPrompt",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "dataAgentPrompt",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "targetFirstName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "targetFriend",
          "type": "string"
        },
        {
          "internalType": "enum LeadAgent.Situation",
          "name": "situation",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "situationAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "publicInfo",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "privateInfo",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "groupTitle",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "groupImage",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "groupId",
          "type": "string"
        }
      ],
      "name": "runAgent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOracleAddress",
          "type": "address"
        }
      ],
      "name": "setOracleAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "socialAgent",
      "outputs": [
        {
          "internalType": "contract IOpenAiChatGpt",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "techAgent",
      "outputs": [
        {
          "internalType": "contract IOpenAiChatGpt",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xaafbfbc3b15e74d8e3c6cf9104dbf0f56db66444ad54f0f05f1d22276727b56e",
  "receipt": {
    "to": "0x0000000000000000000000000000000000000000",
    "from": "0x372082138ea420eBe56078D73F0359D686A7E981",
    "contractAddress": "0xD5Aebe088c5ba05D1094A3888D9b0474c087fD51",
    "transactionIndex": 0,
    "gasUsed": "10288859",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x878099e53cbd1c0707d7c78b5091ca01ab50afad32980e6a733055261438ae05",
    "transactionHash": "0xaafbfbc3b15e74d8e3c6cf9104dbf0f56db66444ad54f0f05f1d22276727b56e",
    "logs": [],
    "blockNumber": 35235666,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x68EC9556830AD097D661Df2557FBCeC166a0A075",
    "You are a helpful assistant",
    "0x06b49e0F8eB52Be2b45E46EBcfC149381BD9Bf59",
    "0x33735222498A0819Ec0c59522190B7FfED5A0f6C",
    "0x43597552e6b6cF4d6b8DE2ED0D0C7DCA4c986327"
  ],
  "numDeployments": 5,
  "solcInputHash": "144e2ca6d9346f43c64cf0cddec9898c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOracleAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"systemPrompt\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"techAgentFactoryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"socialAgentFactoryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dataAgentFactoryAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"runId\",\"type\":\"uint256\"}],\"name\":\"AgentRunCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOracleAddress\",\"type\":\"address\"}],\"name\":\"OracleAddressUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"runId\",\"type\":\"uint256\"}],\"name\":\"addMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"agentRunCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"agentRuns\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"targetFirstName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"targetFriend\",\"type\":\"string\"},{\"internalType\":\"enum LeadAgent.Situation\",\"name\":\"situation\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"situationAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"publicInfo\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"privateInfo\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"groupTitle\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"groupImage\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"groupId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"responsesCount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"max_iterations\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"is_finished\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dataAgent\",\"outputs\":[{\"internalType\":\"contract IOpenAiChatGpt\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"}],\"name\":\"getAgentRuns\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"targetFirstName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"targetFriend\",\"type\":\"string\"},{\"internalType\":\"enum LeadAgent.Situation\",\"name\":\"situation\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"situationAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"publicInfo\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"privateInfo\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"groupTitle\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"groupImage\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"groupId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"responsesCount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"max_iterations\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"is_finished\",\"type\":\"bool\"}],\"internalType\":\"struct LeadAgent.AgentRunInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"agentId\",\"type\":\"uint256\"}],\"name\":\"getMessageHistoryContents\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"agentId\",\"type\":\"uint256\"}],\"name\":\"getMessageHistoryRoles\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"runId\",\"type\":\"uint256\"}],\"name\":\"isRunFinished\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"runId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"response\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"errorMessage\",\"type\":\"string\"}],\"name\":\"onOracleFunctionResponse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"runId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"functionName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"functionArguments\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"created\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"model\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"systemFingerprint\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"object\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"completionTokens\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"promptTokens\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"totalTokens\",\"type\":\"uint32\"}],\"internalType\":\"struct IOracle.OpenAiResponse\",\"name\":\"response\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"errorMessage\",\"type\":\"string\"}],\"name\":\"onOracleOpenAiLlmResponse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prompt\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"query\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"max_iterations\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"techAgentPrompt\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"socialAgentPrompt\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"dataAgentPrompt\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"targetFirstName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"targetFriend\",\"type\":\"string\"},{\"internalType\":\"enum LeadAgent.Situation\",\"name\":\"situation\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"situationAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"publicInfo\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"privateInfo\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"groupTitle\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"groupImage\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"groupId\",\"type\":\"string\"}],\"name\":\"runAgent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOracleAddress\",\"type\":\"address\"}],\"name\":\"setOracleAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"socialAgent\",\"outputs\":[{\"internalType\":\"contract IOpenAiChatGpt\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"techAgent\",\"outputs\":[{\"internalType\":\"contract IOpenAiChatGpt\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LeadAgent.sol\":\"LeadAgent\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/BaseAgent.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport \\\"./EnhancedOpenAiChatGpt.sol\\\";\\n\\ncontract BaseAgent is EnhancedOpenAiChatGpt {\\n    constructor(address initialOracleAddress) EnhancedOpenAiChatGpt(initialOracleAddress) {}\\n}\",\"keccak256\":\"0xa99b98997cd37f35ec665823c41432ee39e64cbb44f1b69175fc58ffa2f4338b\",\"license\":\"UNLICENSED\"},\"contracts/DataAgent.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport \\\"./BaseAgent.sol\\\";\\n\\ncontract DataAgent is BaseAgent {\\n    constructor(address initialOracleAddress) BaseAgent(initialOracleAddress) {}\\n}\",\"keccak256\":\"0xcda8cfd0dca2abab5a0fae7ffe277e57b787db9c8de5214f3991c745b63dd473\",\"license\":\"UNLICENSED\"},\"contracts/EnhancedOpenAiChatGpt.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\n// Uncomment this line to use console.log\\n// import \\\"hardhat/console.sol\\\";\\nimport \\\"./interfaces/IOracle.sol\\\";\\n\\n// @title EnhancedOpenAiChatGpt\\n// @notice This contract interacts with teeML oracle to handle chat interactions using the OpenAI model.\\ncontract EnhancedOpenAiChatGpt {\\n\\n    struct Message {\\n        string role;\\n        string content;\\n    }\\n\\n    struct ChatRun {\\n        address owner;\\n        Message[] messages;\\n        uint messagesCount;\\n    }\\n\\n    // @notice Mapping from chat ID to ChatRun\\n    mapping(uint => ChatRun) public chatRuns;\\n    uint private chatRunsCount;\\n\\n    // @notice Event emitted when a new chat is created\\n    event ChatCreated(address indexed owner, uint indexed chatId);\\n\\n    // @notice Address of the contract owner\\n    address private owner;\\n\\n    // @notice Address of the oracle contract\\n    address public oracleAddress;\\n\\n    // Add these at the top of the contract\\n    mapping(address => bool) public whitelistedAddresses;\\n\\n    // @notice Event emitted when the oracle address is updated\\n    event OracleAddressUpdated(address indexed newOracleAddress);\\n\\n    // @notice Configuration for the OpenAI request\\n    IOracle.OpenAiRequest private config;\\n\\n    // @param initialOracleAddress Initial address of the oracle contract\\n    constructor(address initialOracleAddress) {\\n        owner = msg.sender;\\n        oracleAddress = initialOracleAddress;\\n        chatRunsCount = 0;\\n\\n        config = IOracle.OpenAiRequest({\\n            model : \\\"gpt-4-turbo-preview\\\",\\n            frequencyPenalty : 21, // > 20 for null\\n            logitBias : \\\"\\\", // empty str for null\\n            maxTokens : 1000, // 0 for null\\n            presencePenalty : 21, // > 20 for null\\n            responseFormat : \\\"{\\\\\\\"type\\\\\\\":\\\\\\\"text\\\\\\\"}\\\",\\n            seed : 0, // null\\n            stop : \\\"\\\", // null\\n            temperature : 10, // Example temperature (scaled up, 10 means 1.0), > 20 means null\\n            topP : 101, // Percentage 0-100, > 100 means null\\n            tools : \\\"[{\\\\\\\"type\\\\\\\":\\\\\\\"function\\\\\\\",\\\\\\\"function\\\\\\\":{\\\\\\\"name\\\\\\\":\\\\\\\"web_search\\\\\\\",\\\\\\\"description\\\\\\\":\\\\\\\"Search the internet\\\\\\\",\\\\\\\"parameters\\\\\\\":{\\\\\\\"type\\\\\\\":\\\\\\\"object\\\\\\\",\\\\\\\"properties\\\\\\\":{\\\\\\\"query\\\\\\\":{\\\\\\\"type\\\\\\\":\\\\\\\"string\\\\\\\",\\\\\\\"description\\\\\\\":\\\\\\\"Search query\\\\\\\"}},\\\\\\\"required\\\\\\\":[\\\\\\\"query\\\\\\\"]}}},{\\\\\\\"type\\\\\\\":\\\\\\\"function\\\\\\\",\\\\\\\"function\\\\\\\":{\\\\\\\"name\\\\\\\":\\\\\\\"code_interpreter\\\\\\\",\\\\\\\"description\\\\\\\":\\\\\\\"Evaluates python code in a sandbox environment. The environment resets on every execution. You must send the whole script every time and print your outputs. Script should be pure python code that can be evaluated. It should be in python format NOT markdown. The code should NOT be wrapped in backticks. All python packages including requests, matplotlib, scipy, numpy, pandas, etc are available. Output can only be read from stdout, and stdin. Do not use things like plot.show() as it will not work. print() any output and results so you can capture the output.\\\\\\\",\\\\\\\"parameters\\\\\\\":{\\\\\\\"type\\\\\\\":\\\\\\\"object\\\\\\\",\\\\\\\"properties\\\\\\\":{\\\\\\\"code\\\\\\\":{\\\\\\\"type\\\\\\\":\\\\\\\"string\\\\\\\",\\\\\\\"description\\\\\\\":\\\\\\\"The pure python script to be evaluated. The contents will be in main.py. It should not be in markdown format.\\\\\\\"}},\\\\\\\"required\\\\\\\":[\\\\\\\"code\\\\\\\"]}}}]\\\",\\n            toolChoice : \\\"auto\\\", // \\\"none\\\" or \\\"auto\\\"\\n            user : \\\"\\\" // null\\n        });\\n    }\\n\\n    // @notice Ensures the caller is the contract owner\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Caller is not owner\\\");\\n        _;\\n    }\\n\\n    // @notice Ensures the caller is the oracle contract\\n    modifier onlyOracle() {\\n        require(msg.sender == oracleAddress, \\\"Caller is not oracle\\\");\\n        _;\\n    }\\n\\n    modifier onlyOwnerOrWhitelisted() {\\n        require(msg.sender == owner || whitelistedAddresses[msg.sender], \\\"Not authorized\\\");\\n        _;\\n    }\\n\\n    // @notice Updates the oracle address\\n    // @param newOracleAddress The new oracle address to set\\n    function setOracleAddress(address newOracleAddress) public onlyOwner {\\n        oracleAddress = newOracleAddress;\\n        emit OracleAddressUpdated(newOracleAddress);\\n    }\\n\\n    function addToWhitelist(address _address) public onlyOwner {\\n        whitelistedAddresses[_address] = true;\\n    }\\n\\n    function removeFromWhitelist(address _address) public onlyOwner {\\n        whitelistedAddresses[_address] = false;\\n    }\\n\\n    // @notice Starts a new chat\\n    // @param message The initial message to start the chat with\\n    // @return The ID of the newly created chat\\n    function startChat(string memory message) public returns (uint) {\\n        ChatRun storage run = chatRuns[chatRunsCount];\\n\\n        run.owner = msg.sender;\\n        Message memory newMessage = Message({\\n            role: \\\"user\\\",\\n            content: message\\n        });\\n        run.messages.push(newMessage);\\n        run.messagesCount = 1;\\n\\n        uint currentId = chatRunsCount;\\n        chatRunsCount = chatRunsCount + 1;\\n\\n        IOracle(oracleAddress).createOpenAiLlmCall(currentId, config);\\n        emit ChatCreated(msg.sender, currentId);\\n\\n        return currentId;\\n    }\\n\\n    // @notice Handles the response from the oracle for an OpenAI LLM call\\n    // @param runId The ID of the chat run\\n    // @param response The response from the oracle\\n    // @param errorMessage Any error message\\n    // @dev Called by teeML oracle\\n    function onOracleOpenAiLlmResponse(\\n        uint runId,\\n        IOracle.OpenAiResponse memory response,\\n        string memory errorMessage\\n    ) public onlyOracle {\\n        ChatRun storage run = chatRuns[runId];\\n        require(\\n            compareStrings(run.messages[run.messagesCount - 1].role, \\\"user\\\"),\\n            \\\"No message to respond to\\\"\\n        );\\n\\n        if (!compareStrings(errorMessage, \\\"\\\")) {\\n            Message memory newMessage = Message({\\n                role: \\\"assistant\\\",\\n                content: errorMessage\\n            });\\n            run.messages.push(newMessage);\\n            run.messagesCount++;\\n        } else {\\n            if (compareStrings(response.content, \\\"\\\")) {\\n                IOracle(oracleAddress).createFunctionCall(runId, response.functionName, response.functionArguments);\\n            } else {\\n                Message memory newMessage = Message({\\n                    role: \\\"assistant\\\",\\n                    content: response.content\\n                });\\n                run.messages.push(newMessage);\\n                run.messagesCount++;\\n            }\\n        }\\n    }\\n\\n    // @notice Handles the response from the oracle for a function call\\n    // @param runId The ID of the chat run\\n    // @param response The response from the oracle\\n    // @param errorMessage Any error message\\n    // @dev Called by teeML oracle\\n    function onOracleFunctionResponse(\\n        uint runId,\\n        string memory response,\\n        string memory errorMessage\\n    ) public onlyOracle {\\n        ChatRun storage run = chatRuns[runId];\\n        require(\\n            compareStrings(run.messages[run.messagesCount - 1].role, \\\"user\\\"),\\n            \\\"No function to respond to\\\"\\n        );\\n        if (compareStrings(errorMessage, \\\"\\\")) {\\n            Message memory newMessage = Message({\\n                role: \\\"user\\\",\\n                content: response\\n            });\\n            run.messages.push(newMessage);\\n            run.messagesCount++;\\n            IOracle(oracleAddress).createOpenAiLlmCall(runId, config);\\n        }\\n    }\\n\\n    // @notice Adds a new message to an existing chat run\\n    // @param message The new message to add\\n    // @param runId The ID of the chat run\\n    function addMessage(string memory message, uint runId) public { // onlyOwnerOrWhitelisted\\n        ChatRun storage run = chatRuns[runId];\\n        require(\\n            compareStrings(run.messages[run.messagesCount - 1].role, \\\"assistant\\\"),\\n            \\\"No response to previous message\\\"\\n        );\\n        // require(\\n        //     run.owner == msg.sender, \\\"Only chat owner can add messages\\\"\\n        // );\\n\\n        Message memory newMessage = Message({\\n            role: \\\"user\\\",\\n            content: message\\n        });\\n        run.messages.push(newMessage);\\n        run.messagesCount++;\\n\\n        IOracle(oracleAddress).createOpenAiLlmCall(runId, config);\\n    }\\n\\n    // @notice Retrieves the message contents of a chat run\\n    // @param chatId The ID of the chat run\\n    // @return An array of message contents\\n    function getMessageHistoryContents(uint chatId) public view returns (string[] memory) {\\n        ChatRun storage run = chatRuns[chatId];\\n        string[] memory contents = new string[](run.messagesCount);\\n        for (uint i = 0; i < run.messagesCount; i++) {\\n            contents[i] = run.messages[i].content;\\n        }\\n        return contents;\\n    }\\n\\n    // @notice Retrieves the message roles of a chat run\\n    // @param chatId The ID of the chat run\\n    // @return An array of message roles\\n    function getMessageHistoryRoles(uint chatId) public view returns (string[] memory) {\\n        ChatRun storage run = chatRuns[chatId];\\n        string[] memory roles = new string[](run.messagesCount);\\n        for (uint i = 0; i < run.messagesCount; i++) {\\n            roles[i] = run.messages[i].role;\\n        }\\n        return roles;\\n    }\\n\\n    // @notice Compares two strings for equality\\n    // @param a The first string\\n    // @param b The second string\\n    // @return True if the strings are equal, false otherwise\\n    function compareStrings(string memory a, string memory b) private pure returns (bool) {\\n        return (keccak256(abi.encodePacked((a))) == keccak256(abi.encodePacked((b))));\\n    }\\n}\\n\",\"keccak256\":\"0xc53fdb01c0c8b31b12c68360d5d6b57b6fe52cf0c8de573a8617a354f2a1dc85\",\"license\":\"UNLICENSED\"},\"contracts/LeadAgent.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\n// Uncomment this line to use console.log\\n// import \\\"hardhat/console.sol\\\";\\nimport \\\"./interfaces/IOracle.sol\\\";\\nimport \\\"./interfaces/IOpenAiChatGpt.sol\\\";\\nimport \\\"./factories/TechAgentFactory.sol\\\";\\nimport \\\"./factories/SocialAgentFactory.sol\\\";\\nimport \\\"./factories/DataAgentFactory.sol\\\";\\n\\ncontract LeadAgent {\\n\\n    string public prompt;\\n\\n    struct Message {\\n        string role;\\n        string content;\\n    }\\n\\n    enum Situation {\\n        UsdcDonation,\\n        NftMint\\n    }\\n\\n    struct AgentRun {\\n        address owner;\\n        address creator;\\n        address target;\\n        string targetFirstName;\\n        string targetFriend;\\n        Situation situation;\\n        address situationAddress;\\n        string publicInfo;\\n        string privateInfo;\\n        string groupTitle;\\n        string groupImage;\\n        string groupId;\\n        Message[] commands;\\n        uint responsesCount;\\n        uint8 max_iterations;\\n        bool is_finished;\\n    }\\n\\n    struct AgentRunInfo {\\n        address owner;\\n        address creator;\\n        address target;\\n        string targetFirstName;\\n        string targetFriend;\\n        Situation situation;\\n        address situationAddress;\\n        string publicInfo;\\n        string privateInfo;\\n        string groupTitle;\\n        string groupImage;\\n        string groupId;\\n        uint responsesCount;\\n        uint8 max_iterations;\\n        bool is_finished;\\n    }\\n\\n    mapping(uint => AgentRun) public agentRuns;\\n    uint public agentRunCount;\\n\\n    event AgentRunCreated(address indexed owner, uint indexed runId);\\n\\n    address private owner;\\n    address public oracleAddress;\\n\\n    event OracleAddressUpdated(address indexed newOracleAddress);\\n\\n    IOracle.OpenAiRequest private config;\\n\\n    IOpenAiChatGpt public techAgent;\\n    IOpenAiChatGpt public socialAgent;\\n    IOpenAiChatGpt public dataAgent;\\n\\n    constructor(\\n        address initialOracleAddress,         \\n        string memory systemPrompt,\\n        address techAgentFactoryAddress,\\n        address socialAgentFactoryAddress,\\n        address dataAgentFactoryAddress\\n    ) {\\n        owner = msg.sender;\\n        oracleAddress = initialOracleAddress;\\n        prompt = systemPrompt;\\n\\n        // Deploy sub-agents using factories\\n        techAgent = IOpenAiChatGpt(TechAgentFactory(techAgentFactoryAddress).createTechAgent(oracleAddress));\\n        socialAgent = IOpenAiChatGpt(SocialAgentFactory(socialAgentFactoryAddress).createSocialAgent(oracleAddress));\\n        dataAgent = IOpenAiChatGpt(DataAgentFactory(dataAgentFactoryAddress).createDataAgent(oracleAddress));\\n\\n        config = IOracle.OpenAiRequest({\\n            model : \\\"gpt-4-turbo-preview\\\",\\n            frequencyPenalty : 21, // > 20 for null\\n            logitBias : \\\"\\\", // empty str for null\\n            maxTokens : 1000, // 0 for null\\n            presencePenalty : 21, // > 20 for null\\n            responseFormat : \\\"{\\\\\\\"type\\\\\\\":\\\\\\\"text\\\\\\\"}\\\",\\n            seed : 0, // null\\n            stop : \\\"\\\", // null\\n            temperature : 10, // Example temperature (scaled up, 10 means 1.0), > 20 means null\\n            topP : 101, // Percentage 0-100, > 100 means null\\n            tools : \\\"[{\\\\\\\"type\\\\\\\":\\\\\\\"function\\\\\\\",\\\\\\\"function\\\\\\\":{\\\\\\\"name\\\\\\\":\\\\\\\"web_search\\\\\\\",\\\\\\\"description\\\\\\\":\\\\\\\"Search the internet\\\\\\\",\\\\\\\"parameters\\\\\\\":{\\\\\\\"type\\\\\\\":\\\\\\\"object\\\\\\\",\\\\\\\"properties\\\\\\\":{\\\\\\\"query\\\\\\\":{\\\\\\\"type\\\\\\\":\\\\\\\"string\\\\\\\",\\\\\\\"description\\\\\\\":\\\\\\\"Search query\\\\\\\"}},\\\\\\\"required\\\\\\\":[\\\\\\\"query\\\\\\\"]}}},{\\\\\\\"type\\\\\\\":\\\\\\\"function\\\\\\\",\\\\\\\"function\\\\\\\":{\\\\\\\"name\\\\\\\":\\\\\\\"image_generation\\\\\\\",\\\\\\\"description\\\\\\\":\\\\\\\"Generates an image using Dalle-2\\\\\\\",\\\\\\\"parameters\\\\\\\":{\\\\\\\"type\\\\\\\":\\\\\\\"object\\\\\\\",\\\\\\\"properties\\\\\\\":{\\\\\\\"prompt\\\\\\\":{\\\\\\\"type\\\\\\\":\\\\\\\"string\\\\\\\",\\\\\\\"description\\\\\\\":\\\\\\\"Dalle-2 prompt to generate an image\\\\\\\"}},\\\\\\\"required\\\\\\\":[\\\\\\\"prompt\\\\\\\"]}}}]\\\",\\n            toolChoice : \\\"auto\\\", // \\\"none\\\" or \\\"auto\\\"\\n            user : \\\"\\\" // null\\n        });\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Caller is not owner\\\");\\n        _;\\n    }\\n\\n    modifier onlyOracle() {\\n        require(msg.sender == oracleAddress, \\\"Caller is not oracle\\\");\\n        _;\\n    }\\n\\n    function setOracleAddress(address newOracleAddress) public onlyOwner {\\n        require(msg.sender == owner, \\\"Caller is not the owner\\\");\\n        oracleAddress = newOracleAddress;\\n        emit OracleAddressUpdated(newOracleAddress);\\n    }\\n\\n    function runAgent(\\n        string memory query,\\n        uint8 max_iterations,\\n        string memory techAgentPrompt,\\n        string memory socialAgentPrompt,\\n        string memory dataAgentPrompt,\\n        address creator,\\n        address target,\\n        string memory targetFirstName,\\n        string memory targetFriend,\\n        Situation situation,\\n        address situationAddress,\\n        string memory publicInfo,\\n        string memory privateInfo,\\n        string memory groupTitle,\\n        string memory groupImage,\\n        string memory groupId\\n    ) public returns (uint) {\\n        uint currentId = agentRunCount;\\n        AgentRun storage run = agentRuns[currentId];\\n\\n        run.owner = msg.sender;\\n        run.creator = creator;\\n        run.target = target;\\n        run.targetFirstName = targetFirstName;\\n        run.targetFriend = targetFriend;\\n        run.situation = situation;\\n        run.situationAddress = situationAddress;\\n        run.publicInfo = publicInfo;\\n        run.privateInfo = privateInfo;\\n        run.groupTitle = groupTitle;\\n        run.groupImage = groupImage;\\n        run.groupId = groupId;\\n        run.is_finished = false;\\n        run.responsesCount = 0;\\n        run.max_iterations = max_iterations;\\n\\n        // Initialize sub-agents with prompts\\n        techAgent.startChat(techAgentPrompt);\\n        socialAgent.startChat(socialAgentPrompt);\\n        dataAgent.startChat(dataAgentPrompt);\\n\\n        Message memory systemMessage;\\n        systemMessage.content = prompt;\\n        systemMessage.role = \\\"system\\\";\\n        run.commands.push(systemMessage);\\n\\n        Message memory newMessage;\\n        newMessage.content = query;\\n        newMessage.role = \\\"user\\\";\\n        run.commands.push(newMessage);\\n\\n        agentRunCount = agentRunCount + 1;\\n\\n        IOracle(oracleAddress).createOpenAiLlmCall(currentId, config);\\n        emit AgentRunCreated(run.owner, currentId);\\n\\n        return currentId;\\n    }\\n\\n    function onOracleOpenAiLlmResponse(\\n        uint runId,\\n        IOracle.OpenAiResponse memory response,\\n        string memory errorMessage\\n    ) public onlyOracle {\\n        AgentRun storage run = agentRuns[runId];\\n\\n        // If there is an error message, add it to the commands and mark the run as finished\\n        if (!compareStrings(errorMessage, \\\"\\\")) {\\n            Message memory newMessage;\\n            newMessage.role = \\\"assistant\\\";\\n            newMessage.content = errorMessage;\\n            run.commands.push(newMessage);\\n            run.responsesCount++;\\n            run.is_finished = true;\\n            return;\\n        }\\n\\n        // If there is a response content, add it to the commands\\n        if (!compareStrings(response.content, \\\"\\\")) {\\n            Message memory assistantMessage;\\n            assistantMessage.content = response.content;\\n            assistantMessage.role = \\\"assistant\\\";\\n            run.commands.push(assistantMessage);\\n            run.responsesCount++;\\n\\n            if (startsWith(response.content, \\\"TechAgent do:\\\")) {\\n                techAgent.addMessage(response.content, runId);\\n            } else if (startsWith(response.content, \\\"SocialAgent do:\\\")) {\\n                socialAgent.addMessage(response.content, runId);\\n            } else if (startsWith(response.content, \\\"DataAgent do:\\\")) {\\n                dataAgent.addMessage(response.content, runId);\\n            }\\n        }\\n\\n        // If there is a function name in the response, initiate a function call\\n        if (!compareStrings(response.functionName, \\\"\\\")) {\\n            IOracle(oracleAddress).createFunctionCall(runId, response.functionName, response.functionArguments);\\n            return;\\n        }\\n\\n        // If the maximum number of iterations is reached, mark the run as finished\\n        if (run.responsesCount >= run.max_iterations) {\\n            run.is_finished = true;\\n            return;\\n        }\\n\\n        // Do not call createOpenAiLlmCall here, wait for user input\\n    }\\n\\n    function onOracleFunctionResponse(\\n        uint runId,\\n        string memory response,\\n        string memory errorMessage\\n    ) public onlyOracle {\\n        AgentRun storage run = agentRuns[runId];\\n        require(\\n            !run.is_finished, \\\"Run is finished\\\"\\n        );\\n        string memory result = response;\\n        if (!compareStrings(errorMessage, \\\"\\\")) {\\n            result = errorMessage;\\n        }\\n        Message memory newMessage;\\n        newMessage.role = \\\"user\\\";\\n        newMessage.content = result;\\n        run.commands.push(newMessage);\\n        run.responsesCount++;\\n        IOracle(oracleAddress).createOpenAiLlmCall(runId, config);\\n    }\\n\\n    function getMessageHistoryContents(uint agentId) public view returns (string[] memory) {\\n        string[] memory commands = new string[](agentRuns[agentId].commands.length);\\n        for (uint i = 0; i < agentRuns[agentId].commands.length; i++) {\\n            commands[i] = agentRuns[agentId].commands[i].content;\\n        }\\n        return commands;\\n    }\\n\\n    function getMessageHistoryRoles(uint agentId) public view returns (string[] memory) {\\n        string[] memory roles = new string[](agentRuns[agentId].commands.length);\\n        for (uint i = 0; i < agentRuns[agentId].commands.length; i++) {\\n            roles[i] = agentRuns[agentId].commands[i].role;\\n        }\\n        return roles;\\n    }\\n\\n    function isRunFinished(uint runId) public view returns (bool) {\\n        return agentRuns[runId].is_finished;\\n    }\\n\\n    function compareStrings(string memory a, string memory b) private pure returns (bool) {\\n        return (keccak256(abi.encodePacked((a))) == keccak256(abi.encodePacked((b))));\\n    }\\n\\n    // Add helper functions\\n    function startsWith(string memory str, string memory prefix) private pure returns (bool) {\\n        return keccak256(abi.encodePacked(substring(str, 0, bytes(prefix).length))) == keccak256(abi.encodePacked(prefix));\\n    }\\n\\n    function substring(string memory str, uint startIndex, uint endIndex) private pure returns (string memory) {\\n        bytes memory strBytes = bytes(str);\\n        bytes memory result = new bytes(endIndex - startIndex);\\n        for (uint i = startIndex; i < endIndex; i++) {\\n            result[i - startIndex] = strBytes[i];\\n        }\\n        return string(result);\\n    }\\n\\n    // @notice Adds a new message to an existing agent run\\n    // @param message The new message to add\\n    // @param runId The ID of the agent run\\n    function addMessage(string memory message, uint runId) public {\\n        AgentRun storage run = agentRuns[runId];\\n        require(!run.is_finished, \\\"Run is finished\\\");\\n        require(run.owner == msg.sender, \\\"Only run owner can add commands\\\");\\n\\n        Message memory newMessage;\\n        newMessage.role = \\\"user\\\";\\n        newMessage.content = message;\\n        run.commands.push(newMessage);\\n        run.responsesCount++;\\n\\n        // Continue the agent run by making another OpenAI LLM call\\n        IOracle(oracleAddress).createOpenAiLlmCall(runId, config);\\n    }\\n\\n    function getAgentRuns(address _creator) public view returns (AgentRunInfo[] memory) {\\n        uint count = 0;\\n        for (uint i = 0; i < agentRunCount; i++) {\\n            if (_creator == address(0) || agentRuns[i].creator == _creator) {\\n                count++;\\n            }\\n        }\\n\\n        AgentRunInfo[] memory filteredRuns = new AgentRunInfo[](count);\\n        uint index = 0;\\n        for (uint i = 0; i < agentRunCount; i++) {\\n            if (_creator == address(0) || agentRuns[i].creator == _creator) {\\n                filteredRuns[index] = AgentRunInfo({\\n                    owner: agentRuns[i].owner,\\n                    creator: agentRuns[i].creator,\\n                    target: agentRuns[i].target,\\n                    targetFirstName: agentRuns[i].targetFirstName,\\n                    targetFriend: agentRuns[i].targetFriend,\\n                    situation: agentRuns[i].situation,\\n                    situationAddress: agentRuns[i].situationAddress,\\n                    publicInfo: agentRuns[i].publicInfo,\\n                    privateInfo: agentRuns[i].privateInfo,\\n                    groupTitle: agentRuns[i].groupTitle,\\n                    groupImage: agentRuns[i].groupImage,\\n                    groupId: agentRuns[i].groupId,\\n                    responsesCount: agentRuns[i].responsesCount,\\n                    max_iterations: agentRuns[i].max_iterations,\\n                    is_finished: agentRuns[i].is_finished\\n                });\\n                index++;\\n            }\\n        }\\n\\n        return filteredRuns;\\n    }\\n}\\n\",\"keccak256\":\"0x0ff2386d0e2d39a38198f06763e827b5fd7c990e18fac226c9af886a59c8a177\",\"license\":\"UNLICENSED\"},\"contracts/SocialAgent.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport \\\"./BaseAgent.sol\\\";\\n\\ncontract SocialAgent is BaseAgent {\\n    constructor(address initialOracleAddress) BaseAgent(initialOracleAddress) {}\\n}\",\"keccak256\":\"0xc887dd35d7c404c94c24db12dd7a7d69b17337da3cbbbd9926fb125686208e0d\",\"license\":\"UNLICENSED\"},\"contracts/TechAgent.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport \\\"./BaseAgent.sol\\\";\\n\\ncontract TechAgent is BaseAgent {\\n    constructor(address initialOracleAddress) BaseAgent(initialOracleAddress) {}\\n}\",\"keccak256\":\"0x5bdda6d52d259cbab2bd636c7466290a812f1f29503b586fb489cece53121046\",\"license\":\"UNLICENSED\"},\"contracts/factories/DataAgentFactory.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport \\\"../DataAgent.sol\\\";\\n\\ncontract DataAgentFactory {\\n    function createDataAgent(address oracleAddress) external returns (address) {\\n        DataAgent dataAgent = new DataAgent(oracleAddress);\\n        dataAgent.addToWhitelist(msg.sender);\\n        return address(dataAgent);\\n    }\\n}\",\"keccak256\":\"0x6c139d5e2964f08df2ecade54b68ebfd4df8e5a9aca0293ab903225b23c1b977\",\"license\":\"UNLICENSED\"},\"contracts/factories/SocialAgentFactory.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport \\\"../SocialAgent.sol\\\";\\n\\ncontract SocialAgentFactory {\\n    function createSocialAgent(address oracleAddress) external returns (address) {\\n        SocialAgent socialAgent = new SocialAgent(oracleAddress);\\n        socialAgent.addToWhitelist(msg.sender);\\n        return address(socialAgent);\\n    }\\n}\",\"keccak256\":\"0xeac65a7a8aa225ae50b25e2f1abd276ad5e31e2d12369d8e71792cd9bbf2cab6\",\"license\":\"UNLICENSED\"},\"contracts/factories/TechAgentFactory.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport \\\"../TechAgent.sol\\\";\\n\\ncontract TechAgentFactory {\\n    function createTechAgent(address oracleAddress) external returns (address) {\\n        TechAgent techAgent = new TechAgent(oracleAddress);\\n        techAgent.addToWhitelist(msg.sender);\\n        return address(techAgent);\\n    }\\n}\",\"keccak256\":\"0x9c0ff97c41c44d3c6883841adf15e742ca893d1a2ed838efff545aef60db647a\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IOpenAiChatGpt.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\ninterface IOpenAiChatGpt {\\n    function addMessage(string memory message, uint runId) external;\\n    function startChat(string memory message) external returns (uint);\\n}\",\"keccak256\":\"0x3dc1f3f72bca2342ef1d12a051e00201a22964b50afaae1c2950b898f57de465\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\ninterface IOracle {\\n\\n    struct Content {\\n        string contentType;\\n        string value;\\n    }\\n\\n    struct Message {\\n        string role;\\n        Content [] content;\\n    }\\n\\n    struct OpenAiRequest {\\n        // \\\"gpt-4-turbo\\\", \\\"gpt-4-turbo-preview\\\" or \\\"gpt-3.5-turbo-1106\\\"\\n        string model;\\n        // int -20 - 20, Mapped to float -2.0 - 2.0. If bigger than 20 then null\\n        int8 frequencyPenalty;\\n        // JSON string or empty string\\n        string logitBias;\\n        // 0 for null\\n        uint32 maxTokens;\\n        // int -20 - 20, Mapped to float -2.0 - 2.0. If bigger than 20 then null\\n        int8 presencePenalty;\\n        // JSON string or empty string\\n        string responseFormat;\\n        // 0 for null\\n        uint seed;\\n        // empty str for null\\n        string stop;\\n        // 0-20, > 20 for null\\n        uint temperature;\\n        // 0-100  percentage, > 100 for null\\n        uint topP;\\n        // JSON list for tools in OpenAI format, empty for null, names have to match the supported tools\\n        string tools;\\n        // \\\"none\\\", \\\"auto\\\" or empty str which defaults to auto on OpenAI side\\n        string toolChoice;\\n        string user;\\n    }\\n\\n    struct OpenAiResponse {\\n        string id;\\n\\n        // either content is an empty str or functionName and functionArguments\\n        string content;\\n        string functionName;\\n        string functionArguments;\\n\\n        uint64 created;\\n        string model;\\n        string systemFingerprint;\\n        // kind of pointless since its always \\\"chat.completion\\\"?\\n        string object;\\n\\n        uint32 completionTokens;\\n        uint32 promptTokens;\\n        uint32 totalTokens;\\n    }\\n\\n    struct GroqRequest {\\n        // \\\"llama3-8b-8192\\\", \\\"llama3-70b-8192\\\", \\\"mixtral-8x7b-32768\\\" or \\\"gemma-7b-it\\\"\\n        string model;\\n        // int -20 - 20, Mapped to float -2.0 - 2.0. If bigger than 20 then null\\n        int8 frequencyPenalty;\\n        // JSON string or empty string\\n        string logitBias;\\n        // 0 for null\\n        uint32 maxTokens;\\n        // int -20 - 20, Mapped to float -2.0 - 2.0. If bigger than 20 then null\\n        int8 presencePenalty;\\n        // JSON string or empty string\\n        string responseFormat;\\n        // 0 for null\\n        uint seed;\\n        // empty str for null\\n        string stop;\\n        // 0-20, > 20 for null\\n        uint temperature;\\n        // 0-100  percentage, > 100 for null\\n        uint topP;\\n        string user;\\n    }\\n\\n    struct GroqResponse {\\n        string id;\\n\\n        string content;\\n\\n        uint64 created;\\n        string model;\\n        string systemFingerprint;\\n        // kind of pointless since its always \\\"chat.completion\\\"?\\n        string object;\\n\\n        uint32 completionTokens;\\n        uint32 promptTokens;\\n        uint32 totalTokens;\\n    }\\n\\n    struct LlmRequest {\\n        // \\\"claude-3-5-sonnet-20240620\\\", \\\"claude-3-opus-20240229\\\", \\\"claude-3-sonnet-20240229\\\", \\\"claude-3-haiku-20240307\\\", \\\"claude-2.1\\\", \\\"claude-2.0\\\", \\\"claude-instant-1.2\\\"\\n        string model;\\n        // int -20 - 20, Mapped to float -2.0 - 2.0. If bigger than 20 then null\\n        int8 frequencyPenalty;\\n        // JSON string or empty string\\n        string logitBias;\\n        // 0 for null\\n        uint32 maxTokens;\\n        // int -20 - 20, Mapped to float -2.0 - 2.0. If bigger than 20 then null\\n        int8 presencePenalty;\\n        // JSON string or empty string\\n        string responseFormat;\\n        // 0 for null\\n        uint seed;\\n        // empty str for null\\n        string stop;\\n        // 0-20, > 20 for null\\n        uint temperature;\\n        // 0-100  percentage, > 100 for null\\n        uint topP;\\n        // JSON list for tools in OpenAI format, empty for null, names have to match the supported tools\\n        string tools;\\n        // \\\"none\\\", \\\"auto\\\" or empty str which defaults to auto on OpenAI side\\n        string toolChoice;\\n        string user;\\n    }\\n\\n    struct LlmResponse {\\n        string id;\\n\\n        // either content is an empty str or functionName and functionArguments\\n        string content;\\n        string functionName;\\n        string functionArguments;\\n\\n        uint64 created;\\n        string model;\\n        string systemFingerprint;\\n        // kind of pointless since its always \\\"chat.completion\\\"?\\n        string object;\\n\\n        uint32 completionTokens;\\n        uint32 promptTokens;\\n        uint32 totalTokens;\\n    }\\n\\n\\n    struct KnowledgeBaseQueryRequest {\\n        string cid;\\n        string query;\\n        uint32 num_documents;\\n    }\\n\\n    function createLlmCall(\\n        uint promptId\\n    ) external returns (uint);\\n\\n    function createLlmCall(\\n        uint promptId,\\n        LlmRequest memory request\\n    ) external returns (uint);\\n\\n    function createGroqLlmCall(\\n        uint promptId,\\n        GroqRequest memory request\\n    ) external returns (uint);\\n\\n    function createOpenAiLlmCall(\\n        uint promptId,\\n        OpenAiRequest memory request\\n    ) external returns (uint);\\n\\n    function createFunctionCall(\\n        uint functionCallbackId,\\n        string memory functionType,\\n        string memory functionInput\\n    ) external returns (uint i);\\n\\n    function createKnowledgeBaseQuery(\\n        uint kbQueryCallbackId,\\n        string memory cid,\\n        string memory query,\\n        uint32 num_documents\\n    ) external returns (uint i);\\n}\",\"keccak256\":\"0x1283962849594f93cf3b48d55414e6ede750fde3dd4e2775f2f6a774a3852296\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 643,
        "contract": "contracts/LeadAgent.sol:LeadAgent",
        "label": "prompt",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 724,
        "contract": "contracts/LeadAgent.sol:LeadAgent",
        "label": "agentRuns",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(AgentRun)687_storage)"
      },
      {
        "astId": 726,
        "contract": "contracts/LeadAgent.sol:LeadAgent",
        "label": "agentRunCount",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 734,
        "contract": "contracts/LeadAgent.sol:LeadAgent",
        "label": "owner",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 736,
        "contract": "contracts/LeadAgent.sol:LeadAgent",
        "label": "oracleAddress",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 743,
        "contract": "contracts/LeadAgent.sol:LeadAgent",
        "label": "config",
        "offset": 0,
        "slot": "5",
        "type": "t_struct(OpenAiRequest)2016_storage"
      },
      {
        "astId": 746,
        "contract": "contracts/LeadAgent.sol:LeadAgent",
        "label": "techAgent",
        "offset": 0,
        "slot": "17",
        "type": "t_contract(IOpenAiChatGpt)1975"
      },
      {
        "astId": 749,
        "contract": "contracts/LeadAgent.sol:LeadAgent",
        "label": "socialAgent",
        "offset": 0,
        "slot": "18",
        "type": "t_contract(IOpenAiChatGpt)1975"
      },
      {
        "astId": 752,
        "contract": "contracts/LeadAgent.sol:LeadAgent",
        "label": "dataAgent",
        "offset": 0,
        "slot": "19",
        "type": "t_contract(IOpenAiChatGpt)1975"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Message)648_storage)dyn_storage": {
        "base": "t_struct(Message)648_storage",
        "encoding": "dynamic_array",
        "label": "struct LeadAgent.Message[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IOpenAiChatGpt)1975": {
        "encoding": "inplace",
        "label": "contract IOpenAiChatGpt",
        "numberOfBytes": "20"
      },
      "t_enum(Situation)651": {
        "encoding": "inplace",
        "label": "enum LeadAgent.Situation",
        "numberOfBytes": "1"
      },
      "t_int8": {
        "encoding": "inplace",
        "label": "int8",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_struct(AgentRun)687_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LeadAgent.AgentRun)",
        "numberOfBytes": "32",
        "value": "t_struct(AgentRun)687_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AgentRun)687_storage": {
        "encoding": "inplace",
        "label": "struct LeadAgent.AgentRun",
        "members": [
          {
            "astId": 653,
            "contract": "contracts/LeadAgent.sol:LeadAgent",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 655,
            "contract": "contracts/LeadAgent.sol:LeadAgent",
            "label": "creator",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 657,
            "contract": "contracts/LeadAgent.sol:LeadAgent",
            "label": "target",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 659,
            "contract": "contracts/LeadAgent.sol:LeadAgent",
            "label": "targetFirstName",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 661,
            "contract": "contracts/LeadAgent.sol:LeadAgent",
            "label": "targetFriend",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 664,
            "contract": "contracts/LeadAgent.sol:LeadAgent",
            "label": "situation",
            "offset": 0,
            "slot": "5",
            "type": "t_enum(Situation)651"
          },
          {
            "astId": 666,
            "contract": "contracts/LeadAgent.sol:LeadAgent",
            "label": "situationAddress",
            "offset": 1,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 668,
            "contract": "contracts/LeadAgent.sol:LeadAgent",
            "label": "publicInfo",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          },
          {
            "astId": 670,
            "contract": "contracts/LeadAgent.sol:LeadAgent",
            "label": "privateInfo",
            "offset": 0,
            "slot": "7",
            "type": "t_string_storage"
          },
          {
            "astId": 672,
            "contract": "contracts/LeadAgent.sol:LeadAgent",
            "label": "groupTitle",
            "offset": 0,
            "slot": "8",
            "type": "t_string_storage"
          },
          {
            "astId": 674,
            "contract": "contracts/LeadAgent.sol:LeadAgent",
            "label": "groupImage",
            "offset": 0,
            "slot": "9",
            "type": "t_string_storage"
          },
          {
            "astId": 676,
            "contract": "contracts/LeadAgent.sol:LeadAgent",
            "label": "groupId",
            "offset": 0,
            "slot": "10",
            "type": "t_string_storage"
          },
          {
            "astId": 680,
            "contract": "contracts/LeadAgent.sol:LeadAgent",
            "label": "commands",
            "offset": 0,
            "slot": "11",
            "type": "t_array(t_struct(Message)648_storage)dyn_storage"
          },
          {
            "astId": 682,
            "contract": "contracts/LeadAgent.sol:LeadAgent",
            "label": "responsesCount",
            "offset": 0,
            "slot": "12",
            "type": "t_uint256"
          },
          {
            "astId": 684,
            "contract": "contracts/LeadAgent.sol:LeadAgent",
            "label": "max_iterations",
            "offset": 0,
            "slot": "13",
            "type": "t_uint8"
          },
          {
            "astId": 686,
            "contract": "contracts/LeadAgent.sol:LeadAgent",
            "label": "is_finished",
            "offset": 1,
            "slot": "13",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "448"
      },
      "t_struct(Message)648_storage": {
        "encoding": "inplace",
        "label": "struct LeadAgent.Message",
        "members": [
          {
            "astId": 645,
            "contract": "contracts/LeadAgent.sol:LeadAgent",
            "label": "role",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 647,
            "contract": "contracts/LeadAgent.sol:LeadAgent",
            "label": "content",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(OpenAiRequest)2016_storage": {
        "encoding": "inplace",
        "label": "struct IOracle.OpenAiRequest",
        "members": [
          {
            "astId": 1991,
            "contract": "contracts/LeadAgent.sol:LeadAgent",
            "label": "model",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 1993,
            "contract": "contracts/LeadAgent.sol:LeadAgent",
            "label": "frequencyPenalty",
            "offset": 0,
            "slot": "1",
            "type": "t_int8"
          },
          {
            "astId": 1995,
            "contract": "contracts/LeadAgent.sol:LeadAgent",
            "label": "logitBias",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 1997,
            "contract": "contracts/LeadAgent.sol:LeadAgent",
            "label": "maxTokens",
            "offset": 0,
            "slot": "3",
            "type": "t_uint32"
          },
          {
            "astId": 1999,
            "contract": "contracts/LeadAgent.sol:LeadAgent",
            "label": "presencePenalty",
            "offset": 4,
            "slot": "3",
            "type": "t_int8"
          },
          {
            "astId": 2001,
            "contract": "contracts/LeadAgent.sol:LeadAgent",
            "label": "responseFormat",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 2003,
            "contract": "contracts/LeadAgent.sol:LeadAgent",
            "label": "seed",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 2005,
            "contract": "contracts/LeadAgent.sol:LeadAgent",
            "label": "stop",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          },
          {
            "astId": 2007,
            "contract": "contracts/LeadAgent.sol:LeadAgent",
            "label": "temperature",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 2009,
            "contract": "contracts/LeadAgent.sol:LeadAgent",
            "label": "topP",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 2011,
            "contract": "contracts/LeadAgent.sol:LeadAgent",
            "label": "tools",
            "offset": 0,
            "slot": "9",
            "type": "t_string_storage"
          },
          {
            "astId": 2013,
            "contract": "contracts/LeadAgent.sol:LeadAgent",
            "label": "toolChoice",
            "offset": 0,
            "slot": "10",
            "type": "t_string_storage"
          },
          {
            "astId": 2015,
            "contract": "contracts/LeadAgent.sol:LeadAgent",
            "label": "user",
            "offset": 0,
            "slot": "11",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "384"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}