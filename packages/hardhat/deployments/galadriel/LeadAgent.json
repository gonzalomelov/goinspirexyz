{
  "address": "0x2887A4d7CC6ED582a86b2702C8ED89b099B88aa9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "initialOracleAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "systemPrompt",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "techAgentFactoryAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "socialAgentFactoryAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dataAgentFactoryAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "runId",
          "type": "uint256"
        }
      ],
      "name": "AgentRunCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOracleAddress",
          "type": "address"
        }
      ],
      "name": "OracleAddressUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "runId",
          "type": "uint256"
        }
      ],
      "name": "addMessage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "agentRunCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "agentRuns",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "targetFirstName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "targetFriend",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "situation",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "publicInfo",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "privateInfo",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "groupTitle",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "groupImage",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "groupId",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "responsesCount",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "max_iterations",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "is_finished",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dataAgent",
      "outputs": [
        {
          "internalType": "contract IOpenAiChatGpt",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_creator",
          "type": "address"
        }
      ],
      "name": "getAgentRunsForCreator",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "targetFirstName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "targetFriend",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "situation",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "publicInfo",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "privateInfo",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "groupTitle",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "groupImage",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "groupId",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "role",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "content",
                  "type": "string"
                }
              ],
              "internalType": "struct LeadAgent.Message[]",
              "name": "commands",
              "type": "tuple[]"
            },
            {
              "internalType": "uint256",
              "name": "responsesCount",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "max_iterations",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "is_finished",
              "type": "bool"
            }
          ],
          "internalType": "struct LeadAgent.AgentRun[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "agentId",
          "type": "uint256"
        }
      ],
      "name": "getMessageHistoryContents",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "agentId",
          "type": "uint256"
        }
      ],
      "name": "getMessageHistoryRoles",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "runId",
          "type": "uint256"
        }
      ],
      "name": "isRunFinished",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "runId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "response",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "errorMessage",
          "type": "string"
        }
      ],
      "name": "onOracleFunctionResponse",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "runId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "id",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "content",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "functionName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "functionArguments",
              "type": "string"
            },
            {
              "internalType": "uint64",
              "name": "created",
              "type": "uint64"
            },
            {
              "internalType": "string",
              "name": "model",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "systemFingerprint",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "object",
              "type": "string"
            },
            {
              "internalType": "uint32",
              "name": "completionTokens",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "promptTokens",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "totalTokens",
              "type": "uint32"
            }
          ],
          "internalType": "struct IOracle.OpenAiResponse",
          "name": "response",
          "type": "tuple"
        },
        {
          "internalType": "string",
          "name": "errorMessage",
          "type": "string"
        }
      ],
      "name": "onOracleOpenAiLlmResponse",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "prompt",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "query",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "max_iterations",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "techAgentPrompt",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "socialAgentPrompt",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "dataAgentPrompt",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "targetFirstName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "targetFriend",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "situation",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "publicInfo",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "privateInfo",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "groupTitle",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "groupImage",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "groupId",
          "type": "string"
        }
      ],
      "name": "runAgent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOracleAddress",
          "type": "address"
        }
      ],
      "name": "setOracleAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "socialAgent",
      "outputs": [
        {
          "internalType": "contract IOpenAiChatGpt",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "techAgent",
      "outputs": [
        {
          "internalType": "contract IOpenAiChatGpt",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xab2f7a8444e2f3adf54f82b1ce6424df08eb03ec48935a23bda0cb131b63c069",
  "receipt": {
    "to": "0x0000000000000000000000000000000000000000",
    "from": "0x372082138ea420eBe56078D73F0359D686A7E981",
    "contractAddress": "0x2887A4d7CC6ED582a86b2702C8ED89b099B88aa9",
    "transactionIndex": 0,
    "gasUsed": "10201625",
    "logsBloom": "0x
    "blockHash": "0xdbc8db11d8d97c8b386f677581dd8280974786cbd111232860e5336ee8f6e521",
    "transactionHash": "0xab2f7a8444e2f3adf54f82b1ce6424df08eb03ec48935a23bda0cb131b63c069",
    "logs": [],
    "blockNumber": 35035942,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x68EC9556830AD097D661Df2557FBCeC166a0A075",
    "You are a helpful assistant",
    "0xA4aB4e7b30d5EE4650f02c11A0c9BFFA6def032b",
    "0xbC37eF69F299acaA32878611425F30581B3A8122",
    "0x4a920BACf82b372D80EE91cA95330298B1A32901"
  ],
  "numDeployments": 1,
  "solcInputHash": "7951b17f03e190c57ab6f1c3a94c86da",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOracleAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"systemPrompt\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"techAgentFactoryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"socialAgentFactoryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dataAgentFactoryAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"runId\",\"type\":\"uint256\"}],\"name\":\"AgentRunCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOracleAddress\",\"type\":\"address\"}],\"name\":\"OracleAddressUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"runId\",\"type\":\"uint256\"}],\"name\":\"addMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"agentRunCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"agentRuns\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"targetFirstName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"targetFriend\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"situation\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"publicInfo\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"privateInfo\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"groupTitle\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"groupImage\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"groupId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"responsesCount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"max_iterations\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"is_finished\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dataAgent\",\"outputs\":[{\"internalType\":\"contract IOpenAiChatGpt\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"}],\"name\":\"getAgentRunsForCreator\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"targetFirstName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"targetFriend\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"situation\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"publicInfo\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"privateInfo\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"groupTitle\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"groupImage\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"groupId\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"role\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"}],\"internalType\":\"struct LeadAgent.Message[]\",\"name\":\"commands\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"responsesCount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"max_iterations\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"is_finished\",\"type\":\"bool\"}],\"internalType\":\"struct LeadAgent.AgentRun[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"agentId\",\"type\":\"uint256\"}],\"name\":\"getMessageHistoryContents\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"agentId\",\"type\":\"uint256\"}],\"name\":\"getMessageHistoryRoles\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"runId\",\"type\":\"uint256\"}],\"name\":\"isRunFinished\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"runId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"response\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"errorMessage\",\"type\":\"string\"}],\"name\":\"onOracleFunctionResponse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"runId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"functionName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"functionArguments\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"created\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"model\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"systemFingerprint\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"object\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"completionTokens\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"promptTokens\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"totalTokens\",\"type\":\"uint32\"}],\"internalType\":\"struct IOracle.OpenAiResponse\",\"name\":\"response\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"errorMessage\",\"type\":\"string\"}],\"name\":\"onOracleOpenAiLlmResponse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prompt\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"query\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"max_iterations\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"techAgentPrompt\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"socialAgentPrompt\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"dataAgentPrompt\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"targetFirstName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"targetFriend\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"situation\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"publicInfo\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"privateInfo\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"groupTitle\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"groupImage\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"groupId\",\"type\":\"string\"}],\"name\":\"runAgent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOracleAddress\",\"type\":\"address\"}],\"name\":\"setOracleAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"socialAgent\",\"outputs\":[{\"internalType\":\"contract IOpenAiChatGpt\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"techAgent\",\"outputs\":[{\"internalType\":\"contract IOpenAiChatGpt\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LeadAgent.sol\":\"LeadAgent\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/BaseAgent.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport \\\"./EnhancedOpenAiChatGpt.sol\\\";\\n\\ncontract BaseAgent is EnhancedOpenAiChatGpt {\\n    constructor(address initialOracleAddress) EnhancedOpenAiChatGpt(initialOracleAddress) {}\\n}\",\"keccak256\":\"0xa99b98997cd37f35ec665823c41432ee39e64cbb44f1b69175fc58ffa2f4338b\",\"license\":\"UNLICENSED\"},\"contracts/DataAgent.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport \\\"./BaseAgent.sol\\\";\\n\\ncontract DataAgent is BaseAgent {\\n    constructor(address initialOracleAddress) BaseAgent(initialOracleAddress) {}\\n}\",\"keccak256\":\"0xcda8cfd0dca2abab5a0fae7ffe277e57b787db9c8de5214f3991c745b63dd473\",\"license\":\"UNLICENSED\"},\"contracts/EnhancedOpenAiChatGpt.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\n// Uncomment this line to use console.log\\n// import \\\"hardhat/console.sol\\\";\\nimport \\\"./interfaces/IOracle.sol\\\";\\n\\n// @title EnhancedOpenAiChatGpt\\n// @notice This contract interacts with teeML oracle to handle chat interactions using the OpenAI model.\\ncontract EnhancedOpenAiChatGpt {\\n\\n    struct Message {\\n        string role;\\n        string content;\\n    }\\n\\n    struct ChatRun {\\n        address owner;\\n        Message[] messages;\\n        uint messagesCount;\\n    }\\n\\n    // @notice Mapping from chat ID to ChatRun\\n    mapping(uint => ChatRun) public chatRuns;\\n    uint private chatRunsCount;\\n\\n    // @notice Event emitted when a new chat is created\\n    event ChatCreated(address indexed owner, uint indexed chatId);\\n\\n    // @notice Address of the contract owner\\n    address private owner;\\n\\n    // @notice Address of the oracle contract\\n    address public oracleAddress;\\n\\n    // Add these at the top of the contract\\n    mapping(address => bool) public whitelistedAddresses;\\n\\n    // @notice Event emitted when the oracle address is updated\\n    event OracleAddressUpdated(address indexed newOracleAddress);\\n\\n    // @notice Configuration for the OpenAI request\\n    IOracle.OpenAiRequest private config;\\n\\n    // @param initialOracleAddress Initial address of the oracle contract\\n    constructor(address initialOracleAddress) {\\n        owner = msg.sender;\\n        oracleAddress = initialOracleAddress;\\n        chatRunsCount = 0;\\n\\n        config = IOracle.OpenAiRequest({\\n            model : \\\"gpt-4-turbo-preview\\\",\\n            frequencyPenalty : 21, // > 20 for null\\n            logitBias : \\\"\\\", // empty str for null\\n            maxTokens : 1000, // 0 for null\\n            presencePenalty : 21, // > 20 for null\\n            responseFormat : \\\"{\\\\\\\"type\\\\\\\":\\\\\\\"text\\\\\\\"}\\\",\\n            seed : 0, // null\\n            stop : \\\"\\\", // null\\n            temperature : 10, // Example temperature (scaled up, 10 means 1.0), > 20 means null\\n            topP : 101, // Percentage 0-100, > 100 means null\\n            tools : \\\"[{\\\\\\\"type\\\\\\\":\\\\\\\"function\\\\\\\",\\\\\\\"function\\\\\\\":{\\\\\\\"name\\\\\\\":\\\\\\\"web_search\\\\\\\",\\\\\\\"description\\\\\\\":\\\\\\\"Search the internet\\\\\\\",\\\\\\\"parameters\\\\\\\":{\\\\\\\"type\\\\\\\":\\\\\\\"object\\\\\\\",\\\\\\\"properties\\\\\\\":{\\\\\\\"query\\\\\\\":{\\\\\\\"type\\\\\\\":\\\\\\\"string\\\\\\\",\\\\\\\"description\\\\\\\":\\\\\\\"Search query\\\\\\\"}},\\\\\\\"required\\\\\\\":[\\\\\\\"query\\\\\\\"]}}},{\\\\\\\"type\\\\\\\":\\\\\\\"function\\\\\\\",\\\\\\\"function\\\\\\\":{\\\\\\\"name\\\\\\\":\\\\\\\"code_interpreter\\\\\\\",\\\\\\\"description\\\\\\\":\\\\\\\"Evaluates python code in a sandbox environment. The environment resets on every execution. You must send the whole script every time and print your outputs. Script should be pure python code that can be evaluated. It should be in python format NOT markdown. The code should NOT be wrapped in backticks. All python packages including requests, matplotlib, scipy, numpy, pandas, etc are available. Output can only be read from stdout, and stdin. Do not use things like plot.show() as it will not work. print() any output and results so you can capture the output.\\\\\\\",\\\\\\\"parameters\\\\\\\":{\\\\\\\"type\\\\\\\":\\\\\\\"object\\\\\\\",\\\\\\\"properties\\\\\\\":{\\\\\\\"code\\\\\\\":{\\\\\\\"type\\\\\\\":\\\\\\\"string\\\\\\\",\\\\\\\"description\\\\\\\":\\\\\\\"The pure python script to be evaluated. The contents will be in main.py. It should not be in markdown format.\\\\\\\"}},\\\\\\\"required\\\\\\\":[\\\\\\\"code\\\\\\\"]}}}]\\\",\\n            toolChoice : \\\"auto\\\", // \\\"none\\\" or \\\"auto\\\"\\n            user : \\\"\\\" // null\\n        });\\n    }\\n\\n    // @notice Ensures the caller is the contract owner\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Caller is not owner\\\");\\n        _;\\n    }\\n\\n    // @notice Ensures the caller is the oracle contract\\n    modifier onlyOracle() {\\n        require(msg.sender == oracleAddress, \\\"Caller is not oracle\\\");\\n        _;\\n    }\\n\\n    modifier onlyOwnerOrWhitelisted() {\\n        require(msg.sender == owner || whitelistedAddresses[msg.sender], \\\"Not authorized\\\");\\n        _;\\n    }\\n\\n    // @notice Updates the oracle address\\n    // @param newOracleAddress The new oracle address to set\\n    function setOracleAddress(address newOracleAddress) public onlyOwner {\\n        oracleAddress = newOracleAddress;\\n        emit OracleAddressUpdated(newOracleAddress);\\n    }\\n\\n    function addToWhitelist(address _address) public onlyOwner {\\n        whitelistedAddresses[_address] = true;\\n    }\\n\\n    function removeFromWhitelist(address _address) public onlyOwner {\\n        whitelistedAddresses[_address] = false;\\n    }\\n\\n    // @notice Starts a new chat\\n    // @param message The initial message to start the chat with\\n    // @return The ID of the newly created chat\\n    function startChat(string memory message) public returns (uint) {\\n        ChatRun storage run = chatRuns[chatRunsCount];\\n\\n        run.owner = msg.sender;\\n        Message memory newMessage = Message({\\n            role: \\\"user\\\",\\n            content: message\\n        });\\n        run.messages.push(newMessage);\\n        run.messagesCount = 1;\\n\\n        uint currentId = chatRunsCount;\\n        chatRunsCount = chatRunsCount + 1;\\n\\n        IOracle(oracleAddress).createOpenAiLlmCall(currentId, config);\\n        emit ChatCreated(msg.sender, currentId);\\n\\n        return currentId;\\n    }\\n\\n    // @notice Handles the response from the oracle for an OpenAI LLM call\\n    // @param runId The ID of the chat run\\n    // @param response The response from the oracle\\n    // @param errorMessage Any error message\\n    // @dev Called by teeML oracle\\n    function onOracleOpenAiLlmResponse(\\n        uint runId,\\n        IOracle.OpenAiResponse memory response,\\n        string memory errorMessage\\n    ) public onlyOracle {\\n        ChatRun storage run = chatRuns[runId];\\n        require(\\n            compareStrings(run.messages[run.messagesCount - 1].role, \\\"user\\\"),\\n            \\\"No message to respond to\\\"\\n        );\\n\\n        if (!compareStrings(errorMessage, \\\"\\\")) {\\n            Message memory newMessage = Message({\\n                role: \\\"assistant\\\",\\n                content: errorMessage\\n            });\\n            run.messages.push(newMessage);\\n            run.messagesCount++;\\n        } else {\\n            if (compareStrings(response.content, \\\"\\\")) {\\n                IOracle(oracleAddress).createFunctionCall(runId, response.functionName, response.functionArguments);\\n            } else {\\n                Message memory newMessage = Message({\\n                    role: \\\"assistant\\\",\\n                    content: response.content\\n                });\\n                run.messages.push(newMessage);\\n                run.messagesCount++;\\n            }\\n        }\\n    }\\n\\n    // @notice Handles the response from the oracle for a function call\\n    // @param runId The ID of the chat run\\n    // @param response The response from the oracle\\n    // @param errorMessage Any error message\\n    // @dev Called by teeML oracle\\n    function onOracleFunctionResponse(\\n        uint runId,\\n        string memory response,\\n        string memory errorMessage\\n    ) public onlyOracle {\\n        ChatRun storage run = chatRuns[runId];\\n        require(\\n            compareStrings(run.messages[run.messagesCount - 1].role, \\\"user\\\"),\\n            \\\"No function to respond to\\\"\\n        );\\n        if (compareStrings(errorMessage, \\\"\\\")) {\\n            Message memory newMessage = Message({\\n                role: \\\"user\\\",\\n                content: response\\n            });\\n            run.messages.push(newMessage);\\n            run.messagesCount++;\\n            IOracle(oracleAddress).createOpenAiLlmCall(runId, config);\\n        }\\n    }\\n\\n    // @notice Adds a new message to an existing chat run\\n    // @param message The new message to add\\n    // @param runId The ID of the chat run\\n    function addMessage(string memory message, uint runId) public { // onlyOwnerOrWhitelisted\\n        ChatRun storage run = chatRuns[runId];\\n        require(\\n            compareStrings(run.messages[run.messagesCount - 1].role, \\\"assistant\\\"),\\n            \\\"No response to previous message\\\"\\n        );\\n        // require(\\n        //     run.owner == msg.sender, \\\"Only chat owner can add messages\\\"\\n        // );\\n\\n        Message memory newMessage = Message({\\n            role: \\\"user\\\",\\n            content: message\\n        });\\n        run.messages.push(newMessage);\\n        run.messagesCount++;\\n\\n        IOracle(oracleAddress).createOpenAiLlmCall(runId, config);\\n    }\\n\\n    // @notice Retrieves the message contents of a chat run\\n    // @param chatId The ID of the chat run\\n    // @return An array of message contents\\n    function getMessageHistoryContents(uint chatId) public view returns (string[] memory) {\\n        ChatRun storage run = chatRuns[chatId];\\n        string[] memory contents = new string[](run.messagesCount);\\n        for (uint i = 0; i < run.messagesCount; i++) {\\n            contents[i] = run.messages[i].content;\\n        }\\n        return contents;\\n    }\\n\\n    // @notice Retrieves the message roles of a chat run\\n    // @param chatId The ID of the chat run\\n    // @return An array of message roles\\n    function getMessageHistoryRoles(uint chatId) public view returns (string[] memory) {\\n        ChatRun storage run = chatRuns[chatId];\\n        string[] memory roles = new string[](run.messagesCount);\\n        for (uint i = 0; i < run.messagesCount; i++) {\\n            roles[i] = run.messages[i].role;\\n        }\\n        return roles;\\n    }\\n\\n    // @notice Compares two strings for equality\\n    // @param a The first string\\n    // @param b The second string\\n    // @return True if the strings are equal, false otherwise\\n    function compareStrings(string memory a, string memory b) private pure returns (bool) {\\n        return (keccak256(abi.encodePacked((a))) == keccak256(abi.encodePacked((b))));\\n    }\\n}\\n\",\"keccak256\":\"0xc53fdb01c0c8b31b12c68360d5d6b57b6fe52cf0c8de573a8617a354f2a1dc85\",\"license\":\"UNLICENSED\"},\"contracts/LeadAgent.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\n// Uncomment this line to use console.log\\n// import \\\"hardhat/console.sol\\\";\\nimport \\\"./interfaces/IOracle.sol\\\";\\nimport \\\"./interfaces/IOpenAiChatGpt.sol\\\";\\nimport \\\"./factories/TechAgentFactory.sol\\\";\\nimport \\\"./factories/SocialAgentFactory.sol\\\";\\nimport \\\"./factories/DataAgentFactory.sol\\\";\\n\\ncontract LeadAgent {\\n\\n    string public prompt;\\n\\n    struct Message {\\n        string role;\\n        string content;\\n    }\\n\\n    struct AgentRun {\\n        address owner;\\n        address creator;\\n        address target;\\n        string targetFirstName;\\n        string targetFriend;\\n        string situation;\\n        string publicInfo;\\n        string privateInfo;\\n        string groupTitle;\\n        string groupImage;\\n        string groupId;\\n        Message[] commands;\\n        uint responsesCount;\\n        uint8 max_iterations;\\n        bool is_finished;\\n    }\\n\\n    mapping(uint => AgentRun) public agentRuns;\\n    uint public agentRunCount;\\n\\n    event AgentRunCreated(address indexed owner, uint indexed runId);\\n\\n    address private owner;\\n    address public oracleAddress;\\n\\n    event OracleAddressUpdated(address indexed newOracleAddress);\\n\\n    IOracle.OpenAiRequest private config;\\n\\n    IOpenAiChatGpt public techAgent;\\n    IOpenAiChatGpt public socialAgent;\\n    IOpenAiChatGpt public dataAgent;\\n\\n    constructor(\\n        address initialOracleAddress,         \\n        string memory systemPrompt,\\n        address techAgentFactoryAddress,\\n        address socialAgentFactoryAddress,\\n        address dataAgentFactoryAddress\\n    ) {\\n        owner = msg.sender;\\n        oracleAddress = initialOracleAddress;\\n        prompt = systemPrompt;\\n\\n        // Deploy sub-agents using factories\\n        techAgent = IOpenAiChatGpt(TechAgentFactory(techAgentFactoryAddress).createTechAgent(oracleAddress));\\n        socialAgent = IOpenAiChatGpt(SocialAgentFactory(socialAgentFactoryAddress).createSocialAgent(oracleAddress));\\n        dataAgent = IOpenAiChatGpt(DataAgentFactory(dataAgentFactoryAddress).createDataAgent(oracleAddress));\\n\\n        config = IOracle.OpenAiRequest({\\n            model : \\\"gpt-4-turbo-preview\\\",\\n            frequencyPenalty : 21, // > 20 for null\\n            logitBias : \\\"\\\", // empty str for null\\n            maxTokens : 1000, // 0 for null\\n            presencePenalty : 21, // > 20 for null\\n            responseFormat : \\\"{\\\\\\\"type\\\\\\\":\\\\\\\"text\\\\\\\"}\\\",\\n            seed : 0, // null\\n            stop : \\\"\\\", // null\\n            temperature : 10, // Example temperature (scaled up, 10 means 1.0), > 20 means null\\n            topP : 101, // Percentage 0-100, > 100 means null\\n            tools : \\\"[{\\\\\\\"type\\\\\\\":\\\\\\\"function\\\\\\\",\\\\\\\"function\\\\\\\":{\\\\\\\"name\\\\\\\":\\\\\\\"web_search\\\\\\\",\\\\\\\"description\\\\\\\":\\\\\\\"Search the internet\\\\\\\",\\\\\\\"parameters\\\\\\\":{\\\\\\\"type\\\\\\\":\\\\\\\"object\\\\\\\",\\\\\\\"properties\\\\\\\":{\\\\\\\"query\\\\\\\":{\\\\\\\"type\\\\\\\":\\\\\\\"string\\\\\\\",\\\\\\\"description\\\\\\\":\\\\\\\"Search query\\\\\\\"}},\\\\\\\"required\\\\\\\":[\\\\\\\"query\\\\\\\"]}}},{\\\\\\\"type\\\\\\\":\\\\\\\"function\\\\\\\",\\\\\\\"function\\\\\\\":{\\\\\\\"name\\\\\\\":\\\\\\\"image_generation\\\\\\\",\\\\\\\"description\\\\\\\":\\\\\\\"Generates an image using Dalle-2\\\\\\\",\\\\\\\"parameters\\\\\\\":{\\\\\\\"type\\\\\\\":\\\\\\\"object\\\\\\\",\\\\\\\"properties\\\\\\\":{\\\\\\\"prompt\\\\\\\":{\\\\\\\"type\\\\\\\":\\\\\\\"string\\\\\\\",\\\\\\\"description\\\\\\\":\\\\\\\"Dalle-2 prompt to generate an image\\\\\\\"}},\\\\\\\"required\\\\\\\":[\\\\\\\"prompt\\\\\\\"]}}}]\\\",\\n            toolChoice : \\\"auto\\\", // \\\"none\\\" or \\\"auto\\\"\\n            user : \\\"\\\" // null\\n        });\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Caller is not owner\\\");\\n        _;\\n    }\\n\\n    modifier onlyOracle() {\\n        require(msg.sender == oracleAddress, \\\"Caller is not oracle\\\");\\n        _;\\n    }\\n\\n    function setOracleAddress(address newOracleAddress) public onlyOwner {\\n        require(msg.sender == owner, \\\"Caller is not the owner\\\");\\n        oracleAddress = newOracleAddress;\\n        emit OracleAddressUpdated(newOracleAddress);\\n    }\\n\\n    function runAgent(\\n        string memory query,\\n        uint8 max_iterations,\\n        string memory techAgentPrompt,\\n        string memory socialAgentPrompt,\\n        string memory dataAgentPrompt,\\n        address creator,\\n        address target,\\n        string memory targetFirstName,\\n        string memory targetFriend,\\n        string memory situation,\\n        string memory publicInfo,\\n        string memory privateInfo,\\n        string memory groupTitle,\\n        string memory groupImage,\\n        string memory groupId\\n    ) public returns (uint) {\\n        uint currentId = agentRunCount;\\n        AgentRun storage run = agentRuns[currentId];\\n\\n        run.owner = msg.sender;\\n        run.creator = creator;\\n        run.target = target;\\n        run.targetFirstName = targetFirstName;\\n        run.targetFriend = targetFriend;\\n        run.situation = situation;\\n        run.publicInfo = publicInfo;\\n        run.privateInfo = privateInfo;\\n        run.groupTitle = groupTitle;\\n        run.groupImage = groupImage;\\n        run.groupId = groupId;\\n        run.is_finished = false;\\n        run.responsesCount = 0;\\n        run.max_iterations = max_iterations;\\n\\n        // Initialize sub-agents with prompts\\n        techAgent.startChat(techAgentPrompt);\\n        socialAgent.startChat(socialAgentPrompt);\\n        dataAgent.startChat(dataAgentPrompt);\\n\\n        Message memory systemMessage;\\n        systemMessage.content = prompt;\\n        systemMessage.role = \\\"system\\\";\\n        run.commands.push(systemMessage);\\n\\n        Message memory newMessage;\\n        newMessage.content = query;\\n        newMessage.role = \\\"user\\\";\\n        run.commands.push(newMessage);\\n\\n        agentRunCount = agentRunCount + 1;\\n\\n        IOracle(oracleAddress).createOpenAiLlmCall(currentId, config);\\n        emit AgentRunCreated(run.owner, currentId);\\n\\n        return currentId;\\n    }\\n\\n    function onOracleOpenAiLlmResponse(\\n        uint runId,\\n        IOracle.OpenAiResponse memory response,\\n        string memory errorMessage\\n    ) public onlyOracle {\\n        AgentRun storage run = agentRuns[runId];\\n\\n        // If there is an error message, add it to the commands and mark the run as finished\\n        if (!compareStrings(errorMessage, \\\"\\\")) {\\n            Message memory newMessage;\\n            newMessage.role = \\\"assistant\\\";\\n            newMessage.content = errorMessage;\\n            run.commands.push(newMessage);\\n            run.responsesCount++;\\n            run.is_finished = true;\\n            return;\\n        }\\n\\n        // If there is a response content, add it to the commands\\n        if (!compareStrings(response.content, \\\"\\\")) {\\n            Message memory assistantMessage;\\n            assistantMessage.content = response.content;\\n            assistantMessage.role = \\\"assistant\\\";\\n            run.commands.push(assistantMessage);\\n            run.responsesCount++;\\n\\n            if (startsWith(response.content, \\\"TechAgent do:\\\")) {\\n                techAgent.addMessage(response.content, runId);\\n            } else if (startsWith(response.content, \\\"SocialAgent do:\\\")) {\\n                socialAgent.addMessage(response.content, runId);\\n            } else if (startsWith(response.content, \\\"DataAgent do:\\\")) {\\n                dataAgent.addMessage(response.content, runId);\\n            }\\n        }\\n\\n        // If there is a function name in the response, initiate a function call\\n        if (!compareStrings(response.functionName, \\\"\\\")) {\\n            IOracle(oracleAddress).createFunctionCall(runId, response.functionName, response.functionArguments);\\n            return;\\n        }\\n\\n        // If the maximum number of iterations is reached, mark the run as finished\\n        if (run.responsesCount >= run.max_iterations) {\\n            run.is_finished = true;\\n            return;\\n        }\\n\\n        // Do not call createOpenAiLlmCall here, wait for user input\\n    }\\n\\n    function onOracleFunctionResponse(\\n        uint runId,\\n        string memory response,\\n        string memory errorMessage\\n    ) public onlyOracle {\\n        AgentRun storage run = agentRuns[runId];\\n        require(\\n            !run.is_finished, \\\"Run is finished\\\"\\n        );\\n        string memory result = response;\\n        if (!compareStrings(errorMessage, \\\"\\\")) {\\n            result = errorMessage;\\n        }\\n        Message memory newMessage;\\n        newMessage.role = \\\"user\\\";\\n        newMessage.content = result;\\n        run.commands.push(newMessage);\\n        run.responsesCount++;\\n        IOracle(oracleAddress).createOpenAiLlmCall(runId, config);\\n    }\\n\\n    function getMessageHistoryContents(uint agentId) public view returns (string[] memory) {\\n        string[] memory commands = new string[](agentRuns[agentId].commands.length);\\n        for (uint i = 0; i < agentRuns[agentId].commands.length; i++) {\\n            commands[i] = agentRuns[agentId].commands[i].content;\\n        }\\n        return commands;\\n    }\\n\\n    function getMessageHistoryRoles(uint agentId) public view returns (string[] memory) {\\n        string[] memory roles = new string[](agentRuns[agentId].commands.length);\\n        for (uint i = 0; i < agentRuns[agentId].commands.length; i++) {\\n            roles[i] = agentRuns[agentId].commands[i].role;\\n        }\\n        return roles;\\n    }\\n\\n    function isRunFinished(uint runId) public view returns (bool) {\\n        return agentRuns[runId].is_finished;\\n    }\\n\\n    function compareStrings(string memory a, string memory b) private pure returns (bool) {\\n        return (keccak256(abi.encodePacked((a))) == keccak256(abi.encodePacked((b))));\\n    }\\n\\n    // Add helper functions\\n    function startsWith(string memory str, string memory prefix) private pure returns (bool) {\\n        return keccak256(abi.encodePacked(substring(str, 0, bytes(prefix).length))) == keccak256(abi.encodePacked(prefix));\\n    }\\n\\n    function substring(string memory str, uint startIndex, uint endIndex) private pure returns (string memory) {\\n        bytes memory strBytes = bytes(str);\\n        bytes memory result = new bytes(endIndex - startIndex);\\n        for (uint i = startIndex; i < endIndex; i++) {\\n            result[i - startIndex] = strBytes[i];\\n        }\\n        return string(result);\\n    }\\n\\n    // @notice Adds a new message to an existing agent run\\n    // @param message The new message to add\\n    // @param runId The ID of the agent run\\n    function addMessage(string memory message, uint runId) public {\\n        AgentRun storage run = agentRuns[runId];\\n        require(!run.is_finished, \\\"Run is finished\\\");\\n        require(run.owner == msg.sender, \\\"Only run owner can add commands\\\");\\n\\n        Message memory newMessage;\\n        newMessage.role = \\\"user\\\";\\n        newMessage.content = message;\\n        run.commands.push(newMessage);\\n        run.responsesCount++;\\n\\n        // Continue the agent run by making another OpenAI LLM call\\n        IOracle(oracleAddress).createOpenAiLlmCall(runId, config);\\n    }\\n\\n    // Add this new function to the LeadAgent contract\\n    function getAgentRunsForCreator(address _creator) public view returns (AgentRun[] memory) {\\n        uint count = 0;\\n        for (uint i = 0; i < agentRunCount; i++) {\\n            if (agentRuns[i].creator == _creator) {\\n                count++;\\n            }\\n        }\\n\\n        AgentRun[] memory creatorRuns = new AgentRun[](count);\\n        uint index = 0;\\n        for (uint i = 0; i < agentRunCount; i++) {\\n            if (agentRuns[i].creator == _creator) {\\n                creatorRuns[index] = agentRuns[i];\\n                index++;\\n            }\\n        }\\n\\n        return creatorRuns;\\n    }\\n}\\n\",\"keccak256\":\"0xde8cf40635b3010a5c32a395885df47622a618473967ad270a3692f0c4fe2f6d\",\"license\":\"UNLICENSED\"},\"contracts/SocialAgent.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport \\\"./BaseAgent.sol\\\";\\n\\ncontract SocialAgent is BaseAgent {\\n    constructor(address initialOracleAddress) BaseAgent(initialOracleAddress) {}\\n}\",\"keccak256\":\"0xc887dd35d7c404c94c24db12dd7a7d69b17337da3cbbbd9926fb125686208e0d\",\"license\":\"UNLICENSED\"},\"contracts/TechAgent.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport \\\"./BaseAgent.sol\\\";\\n\\ncontract TechAgent is BaseAgent {\\n    constructor(address initialOracleAddress) BaseAgent(initialOracleAddress) {}\\n}\",\"keccak256\":\"0x5bdda6d52d259cbab2bd636c7466290a812f1f29503b586fb489cece53121046\",\"license\":\"UNLICENSED\"},\"contracts/factories/DataAgentFactory.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport \\\"../DataAgent.sol\\\";\\n\\ncontract DataAgentFactory {\\n    function createDataAgent(address oracleAddress) external returns (address) {\\n        DataAgent dataAgent = new DataAgent(oracleAddress);\\n        dataAgent.addToWhitelist(msg.sender);\\n        return address(dataAgent);\\n    }\\n}\",\"keccak256\":\"0x6c139d5e2964f08df2ecade54b68ebfd4df8e5a9aca0293ab903225b23c1b977\",\"license\":\"UNLICENSED\"},\"contracts/factories/SocialAgentFactory.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport \\\"../SocialAgent.sol\\\";\\n\\ncontract SocialAgentFactory {\\n    function createSocialAgent(address oracleAddress) external returns (address) {\\n        SocialAgent socialAgent = new SocialAgent(oracleAddress);\\n        socialAgent.addToWhitelist(msg.sender);\\n        return address(socialAgent);\\n    }\\n}\",\"keccak256\":\"0xeac65a7a8aa225ae50b25e2f1abd276ad5e31e2d12369d8e71792cd9bbf2cab6\",\"license\":\"UNLICENSED\"},\"contracts/factories/TechAgentFactory.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport \\\"../TechAgent.sol\\\";\\n\\ncontract TechAgentFactory {\\n    function createTechAgent(address oracleAddress) external returns (address) {\\n        TechAgent techAgent = new TechAgent(oracleAddress);\\n        techAgent.addToWhitelist(msg.sender);\\n        return address(techAgent);\\n    }\\n}\",\"keccak256\":\"0x9c0ff97c41c44d3c6883841adf15e742ca893d1a2ed838efff545aef60db647a\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IOpenAiChatGpt.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\ninterface IOpenAiChatGpt {\\n    function addMessage(string memory message, uint runId) external;\\n    function startChat(string memory message) external returns (uint);\\n}\",\"keccak256\":\"0x3dc1f3f72bca2342ef1d12a051e00201a22964b50afaae1c2950b898f57de465\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\ninterface IOracle {\\n\\n    struct Content {\\n        string contentType;\\n        string value;\\n    }\\n\\n    struct Message {\\n        string role;\\n        Content [] content;\\n    }\\n\\n    struct OpenAiRequest {\\n        // \\\"gpt-4-turbo\\\", \\\"gpt-4-turbo-preview\\\" or \\\"gpt-3.5-turbo-1106\\\"\\n        string model;\\n        // int -20 - 20, Mapped to float -2.0 - 2.0. If bigger than 20 then null\\n        int8 frequencyPenalty;\\n        // JSON string or empty string\\n        string logitBias;\\n        // 0 for null\\n        uint32 maxTokens;\\n        // int -20 - 20, Mapped to float -2.0 - 2.0. If bigger than 20 then null\\n        int8 presencePenalty;\\n        // JSON string or empty string\\n        string responseFormat;\\n        // 0 for null\\n        uint seed;\\n        // empty str for null\\n        string stop;\\n        // 0-20, > 20 for null\\n        uint temperature;\\n        // 0-100  percentage, > 100 for null\\n        uint topP;\\n        // JSON list for tools in OpenAI format, empty for null, names have to match the supported tools\\n        string tools;\\n        // \\\"none\\\", \\\"auto\\\" or empty str which defaults to auto on OpenAI side\\n        string toolChoice;\\n        string user;\\n    }\\n\\n    struct OpenAiResponse {\\n        string id;\\n\\n        // either content is an empty str or functionName and functionArguments\\n        string content;\\n        string functionName;\\n        string functionArguments;\\n\\n        uint64 created;\\n        string model;\\n        string systemFingerprint;\\n        // kind of pointless since its always \\\"chat.completion\\\"?\\n        string object;\\n\\n        uint32 completionTokens;\\n        uint32 promptTokens;\\n        uint32 totalTokens;\\n    }\\n\\n    struct GroqRequest {\\n        // \\\"llama3-8b-8192\\\", \\\"llama3-70b-8192\\\", \\\"mixtral-8x7b-32768\\\" or \\\"gemma-7b-it\\\"\\n        string model;\\n        // int -20 - 20, Mapped to float -2.0 - 2.0. If bigger than 20 then null\\n        int8 frequencyPenalty;\\n        // JSON string or empty string\\n        string logitBias;\\n        // 0 for null\\n        uint32 maxTokens;\\n        // int -20 - 20, Mapped to float -2.0 - 2.0. If bigger than 20 then null\\n        int8 presencePenalty;\\n        // JSON string or empty string\\n        string responseFormat;\\n        // 0 for null\\n        uint seed;\\n        // empty str for null\\n        string stop;\\n        // 0-20, > 20 for null\\n        uint temperature;\\n        // 0-100  percentage, > 100 for null\\n        uint topP;\\n        string user;\\n    }\\n\\n    struct GroqResponse {\\n        string id;\\n\\n        string content;\\n\\n        uint64 created;\\n        string model;\\n        string systemFingerprint;\\n        // kind of pointless since its always \\\"chat.completion\\\"?\\n        string object;\\n\\n        uint32 completionTokens;\\n        uint32 promptTokens;\\n        uint32 totalTokens;\\n    }\\n\\n    struct LlmRequest {\\n        // \\\"claude-3-5-sonnet-20240620\\\", \\\"claude-3-opus-20240229\\\", \\\"claude-3-sonnet-20240229\\\", \\\"claude-3-haiku-20240307\\\", \\\"claude-2.1\\\", \\\"claude-2.0\\\", \\\"claude-instant-1.2\\\"\\n        string model;\\n        // int -20 - 20, Mapped to float -2.0 - 2.0. If bigger than 20 then null\\n        int8 frequencyPenalty;\\n        // JSON string or empty string\\n        string logitBias;\\n        // 0 for null\\n        uint32 maxTokens;\\n        // int -20 - 20, Mapped to float -2.0 - 2.0. If bigger than 20 then null\\n        int8 presencePenalty;\\n        // JSON string or empty string\\n        string responseFormat;\\n        // 0 for null\\n        uint seed;\\n        // empty str for null\\n        string stop;\\n        // 0-20, > 20 for null\\n        uint temperature;\\n        // 0-100  percentage, > 100 for null\\n        uint topP;\\n        // JSON list for tools in OpenAI format, empty for null, names have to match the supported tools\\n        string tools;\\n        // \\\"none\\\", \\\"auto\\\" or empty str which defaults to auto on OpenAI side\\n        string toolChoice;\\n        string user;\\n    }\\n\\n    struct LlmResponse {\\n        string id;\\n\\n        // either content is an empty str or functionName and functionArguments\\n        string content;\\n        string functionName;\\n        string functionArguments;\\n\\n        uint64 created;\\n        string model;\\n        string systemFingerprint;\\n        // kind of pointless since its always \\\"chat.completion\\\"?\\n        string object;\\n\\n        uint32 completionTokens;\\n        uint32 promptTokens;\\n        uint32 totalTokens;\\n    }\\n\\n\\n    struct KnowledgeBaseQueryRequest {\\n        string cid;\\n        string query;\\n        uint32 num_documents;\\n    }\\n\\n    function createLlmCall(\\n        uint promptId\\n    ) external returns (uint);\\n\\n    function createLlmCall(\\n        uint promptId,\\n        LlmRequest memory request\\n    ) external returns (uint);\\n\\n    function createGroqLlmCall(\\n        uint promptId,\\n        GroqRequest memory request\\n    ) external returns (uint);\\n\\n    function createOpenAiLlmCall(\\n        uint promptId,\\n        OpenAiRequest memory request\\n    ) external returns (uint);\\n\\n    function createFunctionCall(\\n        uint functionCallbackId,\\n        string memory functionType,\\n        string memory functionInput\\n    ) external returns (uint i);\\n\\n    function createKnowledgeBaseQuery(\\n        uint kbQueryCallbackId,\\n        string memory cid,\\n        string memory query,\\n        uint32 num_documents\\n    ) external returns (uint i);\\n}\",\"keccak256\":\"0x1283962849594f93cf3b48d55414e6ede750fde3dd4e2775f2f6a774a3852296\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608080604052346200126557620042968038038091620000208285620012a2565b833981019060a08183031262001265576200003b81620012c6565b60208201519092906001600160401b0381116200126557820181601f8201121562001265578051906001600160401b03821162000a9057604051926200008c601f8401601f191660200185620012a2565b82845260208383010111620012655760005b8281106200124f575050602060009183010152620000bf60408301620012c6565b90620000dc6080620000d460608601620012c6565b9401620012c6565b600380546001600160a01b03199081163317909155600480549091166001600160a01b03909616959095179094558051906001600160401b03821162000a9057600054600181811c9116801562001244575b602082101462000a6f57601f8111620011f0575b50602090601f83116001146200117257918060009492602094869262001166575b50508160011b9185199060031b1c19161783555b6004805460405163e2079a8360e01b81526001600160a01b039182169281019290925290938492602492849291165af1908115620010c5576000916200111d575b50601180546001600160a01b0319166001600160a01b0392831617905560048054604051630323981f60e11b8152908316918101919091529160209183916024918391600091165af1908115620010c557600091620010d1575b50601280546001600160a01b0319166001600160a01b0392831617905560048054604051636fe93b6560e11b8152908316918101919091529160209183916024918391600091165af1908115620010c55760009162001080575b50601380546001600160a01b0319166001600160a01b03929092169190911790556040516101a081016001600160401b0381118282101762000a905780604052620002b7816200126a565b601381527f6770742d342d747572626f2d70726576696577000000000000000000000000006101c0830152815260156020820152604051620002f98162001286565b6000815260408201526103e86060820152601560808201526040516200031f816200126a565b600f81526e7b2274797065223a2274657874227d60881b602082015260a0820152600060c0820152604051620003558162001286565b6000815260e0820152600a61010082015260656101208201526040516001600160401b0361020082019081119082111762000a905761020081016040526101d381527f5b7b2274797065223a2266756e6374696f6e222c2266756e6374696f6e223a7b60208201527f226e616d65223a227765625f736561726368222c226465736372697074696f6e60408201527f223a225365617263682074686520696e7465726e6574222c22706172616d657460608201527f657273223a7b2274797065223a226f626a656374222c2270726f70657274696560808201527f73223a7b227175657279223a7b2274797065223a22737472696e67222c22646560a08201527f736372697074696f6e223a22536561726368207175657279227d7d2c2272657160c08201527f7569726564223a5b227175657279225d7d7d7d2c7b2274797065223a2266756e60e08201527f6374696f6e222c2266756e6374696f6e223a7b226e616d65223a22696d6167656101008201527f5f67656e65726174696f6e222c226465736372697074696f6e223a2247656e656101208201527f726174657320616e20696d616765207573696e672044616c6c652d32222c22706101408201527f6172616d6574657273223a7b2274797065223a226f626a656374222c2270726f6101608201527f70657274696573223a7b2270726f6d7074223a7b2274797065223a22737472696101808201527f6e67222c226465736372697074696f6e223a2244616c6c652d322070726f6d706101a08201527f7420746f2067656e657261746520616e20696d616765227d7d2c2272657175696101c08201527f726564223a5b2270726f6d7074225d7d7d7d5d000000000000000000000000006101e0820152610140820152604051620005ed816200126a565b60048152636175746f60e01b6020820152610160820152604051620006128162001286565b6000815261018082015280518051906001600160401b03821162000a905760055490600182811c9216801562001075575b602083101462000a6f5781601f8493116200101f575b50602090601f831160011462000f905760009262000f84575b50508160011b916000199060031b1c1916176005555b602081015160ff19600654169060ff1617600655604081015180519060018060401b03821162000a905760075490600182811c9216801562000f79575b602083101462000a6f5781601f84931162000f18575b50602090601f831160011462000e9a5760009262000e8e575b50508160011b916000199060031b1c1916176007555b63ffffffff60608201511660085490608083015160201b64ff00000000169164ffffffffff1916171760085560a081015180519060018060401b03821162000a905760095490600182811c9216801562000e83575b602083101462000a6f5781601f84931162000e22575b50602090601f831160011462000da45760009262000d98575b50508160011b916000199060031b1c1916176009555b60c0810151600a5560e08101518051906001600160401b03821162000a9057600b5490600182811c9216801562000d8d575b602083101462000a6f5781601f84931162000d1b575b50602090601f831160011462000c8c5760009262000c80575b50508160011b916000199060031b1c191617600b555b610100810151600c55610120810151600d5561014081015180519091906001600160401b03811162000a9057600e54600181811c9116801562000c75575b602082101462000a6f57601f811162000c0b575b50602092601f821160011462000ba0579281929360009262000b94575b50508160011b916000199060031b1c191617600e555b610160810151805191906001600160401b03831162000a9057600f54600181811c9116801562000b89575b602082101462000a6f57601f811162000b30575b50602090601f841160011462000ab25761018093916000918362000aa6575b50508160011b916000199060031b1c191617600f555b015180516001600160401b03811162000a9057601054600181811c9116801562000a85575b602082101462000a6f57601f811162000a05575b50602091601f82116001146200099b579181926000926200098f575b50508160011b916000199060031b1c1916176010555b604051612f3a9081620012dc8239f35b01519050388062000969565b601f19821692601060005260206000209160005b858110620009ec57508360019510620009d2575b505050811b016010556200097f565b015160001960f88460031b161c19169055388080620009c3565b91926020600181928685015181550194019201620009af565b60106000527f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae672601f830160051c8101916020841062000a64575b601f0160051c01905b81811062000a5757506200094d565b6000815560010162000a48565b909150819062000a3f565b634e487b7160e01b600052602260045260246000fd5b90607f169062000939565b634e487b7160e01b600052604160045260246000fd5b015190503880620008fe565b600f600090815260008051602062004276833981519152929190601f198616905b81811062000b17575091600193918661018097941062000afd575b505050811b01600f5562000914565b015160001960f88460031b161c1916905538808062000aee565b9293602060018192878601518155019501930162000ad3565b600f60005260008051602062004276833981519152601f850160051c8101916020861062000b7e575b601f0160051c01905b81811062000b715750620008df565b6000815560010162000b62565b909150819062000b59565b90607f1690620008cb565b0151905038806200088a565b601f19821693600e60005260206000209160005b86811062000bf2575083600195961062000bd8575b505050811b01600e55620008a0565b015160001960f88460031b161c1916905538808062000bc9565b9192602060018192868501518155019401920162000bb4565b600e6000527fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd601f830160051c8101916020841062000c6a575b601f0160051c01905b81811062000c5d57506200086d565b6000815560010162000c4e565b909150819062000c45565b90607f169062000859565b01519050388062000805565b600b600090815293507f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db991905b601f198416851062000cff576001945083601f1981161062000ce5575b505050811b01600b556200081b565b015160001960f88460031b161c1916905538808062000cd6565b8181015183556020948501946001909301929091019062000cb9565b600b6000529091507f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db9601f840160051c81016020851062000d85575b90849392915b601f830160051c8201811062000d75575050620007ec565b6000815585945060010162000d5d565b508062000d57565b91607f1691620007d6565b0151905038806200078e565b6009600090815293506000805160206200425683398151915291905b601f198416851062000e06576001945083601f1981161062000dec575b505050811b01600955620007a4565b015160001960f88460031b161c1916905538808062000ddd565b8181015183556020948501946001909301929091019062000dc0565b600960005290915060008051602062004256833981519152601f840160051c81016020851062000e7b575b90849392915b601f830160051c8201811062000e6b57505062000775565b6000815585945060010162000e53565b508062000e4d565b91607f16916200075f565b015190503880620006f4565b6007600090815293506000805160206200423683398151915291905b601f198416851062000efc576001945083601f1981161062000ee2575b505050811b016007556200070a565b015160001960f88460031b161c1916905538808062000ed3565b8181015183556020948501946001909301929091019062000eb6565b600760005290915060008051602062004236833981519152601f840160051c81016020851062000f71575b90849392915b601f830160051c8201811062000f61575050620006db565b6000815585945060010162000f49565b508062000f43565b91607f1691620006c5565b01519050388062000672565b6005600090815293507f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db091905b601f198416851062001003576001945083601f1981161062000fe9575b505050811b0160055562000688565b015160001960f88460031b161c1916905538808062000fda565b8181015183556020948501946001909301929091019062000fbd565b90915060056000526020600020601f840160051c8101602085106200106d575b90849392915b601f830160051c820181106200105d57505062000659565b6000815585945060010162001045565b50806200103f565b91607f169162000643565b6020813d602011620010bc575b816200109c60209383620012a2565b81010312620010b857620010b19150620012c6565b386200026c565b5080fd5b3d91506200108d565b6040513d6000823e3d90fd5b906020823d60201162001114575b81620010ee60209383620012a2565b8101031262001111575060009162001108602092620012c6565b91509162000212565b80fd5b3d9150620010df565b906020823d6020116200115d575b816200113a60209383620012a2565b8101031262001111575060009162001154602092620012c6565b915091620001b8565b3d91506200112b565b01519050388062000163565b6000808052600080516020620042168339815191529291905b601f1985168110620011d75750926000949260019260209583601f19811610620011be575b505050811b01835562000177565b0151861960f88460031b161c19169055388080620011b0565b919260206001819286850151815501940192016200118b565b6000805260008051602062004216833981519152601f840160051c8101602085106200123c575b601f830160051c820181106200122f57505062000142565b6000815560010162001217565b508062001217565b90607f16906200012e565b806020809284010151828287010152016200009e565b600080fd5b604081019081106001600160401b0382111762000a9057604052565b602081019081106001600160401b0382111762000a9057604052565b601f909101601f19168101906001600160401b0382119082101762000a9057604052565b51906001600160a01b0382168203620012655756fe61010080604052600436101561001457600080fd5b60003560e01c90816304495a3b14611e4d575080632eab9c8114611e165780634c69c00f14611d6c5780634cecd88e14611bba5780635923400b14611b915780637397454d14611abc5780637c65d71114611a84578063941fac3714611943578063a89ae4ba1461191a578063b75f07e4146118f1578063c3159838146113b9578063c63b0295146111c7578063d080dd8914610249578063dade4cf91461022b578063eb17429a146101935763ed6e39e5146100d057600080fd5b3461018e5760208060031936011261018e576004359081600052600190818152600b906101038260406000200154612db1565b936000845b61011f575b6040518061011b8882612466565b0390f35b81600052848352836040600020015481101561018957906101818261015f610166610152899796896040600020016124e1565b5060405192838092612388565b0382611eec565b610170828a612dfb565b5261017b8189612dfb565b50612982565b909192610108565b61010d565b600080fd5b3461018e5760208060031936011261018e576004358060005260018281809452600b906101c68260406000200154612db1565b936000955b6101de575b6040518061011b8782612466565b8060005283825282604060002001548610156102265761021f868561016661020e82999a886040600020016124e1565b5061015f6040518094819301612388565b95946101cb565b6101d0565b3461018e57600036600319011261018e576020600254604051908152f35b3461018e576101e036600319011261018e576004356001600160401b03811161018e5761027a903690600401611f28565b60e05260243560ff8116810361018e576044356001600160401b03811161018e576102a9903690600401611f28565b6064356001600160401b03811161018e576102c8903690600401611f28565b916084356001600160401b03811161018e576102e8903690600401611f28565b60a05260a4356001600160a01b038116810361018e5760c435906001600160a01b038216820361018e5760e4356001600160401b03811161018e57610331903690600401611f28565b610104356001600160401b03811161018e57610351903690600401611f28565b610124356001600160401b03811161018e57610371903690600401611f28565b6001600160401b03610144351161018e576103923661014435600401611f28565b906001600160401b03610164351161018e576103b43661016435600401611f28565b926001600160401b03610184351161018e576103d63661018435600401611f28565b946001600160401b036101a4351161018e576103f8366101a435600401611f28565b966001600160401b036101c4351161018e5761041a366101c435600401611f28565b986002548060805260005260016020526040600020918260c0526bffffffffffffffffffffffff60a01b903382855416178455600184019060018060a01b031682825416179055600283019160018060a01b0316908254161790558151906001600160401b038211610c4b576003610493910154611f80565b601f811161117e575b50602091601f821160011461111057918192600092611105575b50508160011b916000199060031b1c191617600360c05101555b80516001600160401b038111610c4b576104ef600460c0510154611f80565b601f81116110bc575b50602091601f821160011461104a5791819260009261103f575b50508160011b916000199060031b1c191617600460c05101555b80516001600160401b038111610c4b5761054b600560c0510154611f80565b601f8111610ff6575b50602091601f8211600114610f8457918192600092610f79575b50508160011b916000199060031b1c191617600560c05101555b80516001600160401b038111610c4b576105a7600660c0510154611f80565b601f8111610f30575b50602091601f8211600114610ebe57918192600092610eb3575b50508160011b916000199060031b1c191617600660c05101555b80516001600160401b038111610c4b57610603600760c0510154611f80565b601f8111610e6a575b50602091601f8211600114610df857918192600092610ded575b50508160011b916000199060031b1c191617600760c05101555b80516001600160401b038111610c4b5761065f600860c0510154611f80565b601f8111610da4575b50602091601f8211600114610d3257918192600092610d27575b50508160011b916000199060031b1c191617600860c05101555b80516001600160401b038111610c4b576106bb600960c0510154611f80565b601f8111610cde575b50602091601f8211600114610c6c57918192600092610c61575b50508160011b916000199060031b1c191617600960c05101555b8051906001600160401b038211610c4b57610718600a60c0510154611f80565b601f8111610c02575b50602090601f8311600114610b865792826107a893600096936020968892610b7b575b50508160011b9187199060031b1c191617600a60c05101555b60c05160ff600d82019287600c8554940155169061ffff191617905560018060a01b0360115416906040519485809481936316846c1560e11b83528760048401526024830190612441565b03925af18015610a5a57610b50575b5060206107ef60009260018060a01b0360125416906040519485809481936316846c1560e11b83528760048401526024830190612441565b03925af18015610a5a57610b25575b5060018060a01b0360135416602060405180926316846c1560e11b8252826004830152816000816108346024820160a051612441565b03925af18015610a5a57610afa575b506108b561084f6124c8565b60405161085f8161015f81611fba565b602082015260405161087081611ea3565b600681526573797374656d60d01b60208201528152610895600b60c051019182612513565b61089d6124c8565b9060e05160208301526108ae612773565b8252612513565b600254600181018111610ae45760010160025560018060a01b036004541660405190633c38a5f560e01b82526080516004830152604060248301526101a0604483015281600060055461090781611f80565b90816101e4850152600181169081600014610ac15750600114610a66575b5091816000816109df602096600654840b60648401526109cf6109bf61099d61098461095d60431995868982030160848a015261205e565b60085463ffffffff811660a48a01528d1c890b60c4890152858882030160e48901526120e5565b600a54610104880152848782030161012488015261216c565b600c54610144870152600d5461016487015283868203016101848701526121f3565b82858203016101a486015261227a565b90838203016101c4840152612301565b03925af18015610a5a57610a2f575b60c0515460405160805160209281906001600160a01b03167f9697c88a6be3b3ed5062f2dcbd719a10914832320686f14e24f7756210a6685e600080a38152f35b602090813d8311610a53575b610a458183611eec565b8101031261018e57806109ee565b503d610a3b565b6040513d6000823e3d90fd5b6005600090815291507f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db05b818310610aa657505081016102040181610925565b80546102048488010152859350602090920191600101610a91565b60ff19166102048086019190915291151560051b84019091019150829050610925565b634e487b7160e01b600052601160045260246000fd5b602090813d8311610b1e575b610b108183611eec565b8101031261018e5780610843565b503d610b06565b602090813d8311610b49575b610b3b8183611eec565b8101031261018e57806107fe565b503d610b31565b602090813d8311610b74575b610b668183611eec565b8101031261018e57816107b7565b503d610b5c565b015190508880610744565b600a60c09392935101928360005260206000209160005b601f1985168110610bea575083602096936107a8969360019360009a97601f19811610610bd2575b505050811b01905561075d565b0151891960f88460031b161c19169055898080610bc5565b91926020600181928685015181550194019201610b9d565b600a60c051016000526020600020601f840160051c810160208510610c44575b601f830160051c82018110610c38575050610721565b60008155600101610c22565b5080610c22565b634e487b7160e01b600052604160045260246000fd5b0151905086806106de565b90600960c0510192836000526020600020906000935b601f1984168510610cc3576001945083601f19811610610caa575b505050811b0190556106f8565b015160001960f88460031b161c19169055878080610c9d565b81810151835560209485019460019093019290910190610c82565b600960c051016000526020600020601f830160051c810160208410610d20575b601f830160051c82018110610d145750506106c4565b60008155600101610cfe565b5080610cfe565b015190508780610682565b90600860c0510192836000526020600020906000935b601f1984168510610d89576001945083601f19811610610d70575b505050811b01905561069c565b015160001960f88460031b161c19169055888080610d63565b81810151835560209485019460019093019290910190610d48565b600860c051016000526020600020601f830160051c810160208410610de6575b601f830160051c82018110610dda575050610668565b60008155600101610dc4565b5080610dc4565b015190508880610626565b90600760c0510192836000526020600020906000935b601f1984168510610e4f576001945083601f19811610610e36575b505050811b019055610640565b015160001960f88460031b161c19169055898080610e29565b81810151835560209485019460019093019290910190610e0e565b600760c051016000526020600020601f830160051c810160208410610eac575b601f830160051c82018110610ea057505061060c565b60008155600101610e8a565b5080610e8a565b0151905089806105ca565b90600660c0510192836000526020600020906000935b601f1984168510610f15576001945083601f19811610610efc575b505050811b0190556105e4565b015160001960f88460031b161c191690558a8080610eef565b81810151835560209485019460019093019290910190610ed4565b600660c051016000526020600020601f830160051c810160208410610f72575b601f830160051c82018110610f665750506105b0565b60008155600101610f50565b5080610f50565b015190508a8061056e565b90600560c0510192836000526020600020906000935b601f1984168510610fdb576001945083601f19811610610fc2575b505050811b019055610588565b015160001960f88460031b161c191690558b8080610fb5565b81810151835560209485019460019093019290910190610f9a565b600560c051016000526020600020601f830160051c810160208410611038575b601f830160051c8201811061102c575050610554565b60008155600101611016565b5080611016565b015190508b80610512565b90600460c0510192836000526020600020906000935b601f19841685106110a1576001945083601f19811610611088575b505050811b01905561052c565b015160001960f88460031b161c191690558c808061107b565b81810151835560209485019460019093019290910190611060565b600460c051016000526020600020601f830160051c8101602084106110fe575b601f830160051c820181106110f25750506104f8565b600081556001016110dc565b50806110dc565b015190508c806104b6565b600360c0510192836000526020600020916000601f198516905b818110611166575090846001959493921061114d575b505050811b0190556104d0565b015160001960f88460031b161c191690558d8080611140565b9293602060018192878601518155019501930161112a565b600360c051016000526020600020601f830160051c8101602084106111c0575b601f830160051c820181106111b457505061049c565b6000815560010161119e565b508061119e565b3461018e57602036600319011261018e5760043560005260016020526040600020600160a01b6001900390818154169082600182015416926002820154166040518080600385019061121891612388565b036112239082611eec565b604051806112348160048701612388565b0361123f9082611eec565b604051806112508160058801612388565b0361125b9082611eec565b6040518061126c8160068901612388565b036112779082611eec565b60405190816112898160078a01612388565b036112949083611eec565b60405192836112a68160088b01612388565b036112b19085611eec565b60405194856112c38160098c01612388565b036112ce9087611eec565b60405196876112e081600a8d01612388565b036112eb9089611eec565b600c8a015499600d0154986040519c8d9c8d5260208d015260408c01526101c08060608d01528b0161131c91612441565b8a810360808c015261132d91612441565b89810360a08b015261133e91612441565b88810360c08a015261134f91612441565b87810360e089015261136091612441565b86810361010088015261137291612441565b85810361012087015261138491612441565b84810361014086015261139691612441565b9161016084015260ff811661018084015260081c60ff1615156101a08301520390f35b3461018e57602036600319011261018e576113d2611e71565b6000906000600254905b8181106118a857506113ed83612d9a565b926113fb6040519485611eec565b80845261140a601f1991612d9a565b0160005b81811061182a57505060009160005b82811061161457846040518091602082016020835281518091526040830190602060408260051b8601019301916000905b82821061145d57505050500390f35b919390929450603f1986820301825284519060018060a01b03825116815260018060a01b03602083015116602082015260018060a01b03604083015116604082015261155561154161152d6115196115076114f46114e16114ce6060808b0151906101e080918c01528a0190612441565b6080808b0151908a8303908b0152612441565b60a0808a015190898303908a0152612441565b60c0808901519088830390890152612441565b60e087015186820360e0880152612441565b610100808701519086830390870152612441565b610120808601519085830390860152612441565b610140808501519084830390850152612441565b9161016092838201519383820390840152835180825260208201906020808260051b85010196019260005b8281106115c9575050505050600192602092839261018080820151908301526101a060ff8183015116908301526101c0809101511515910152960192019201859493919261144e565b9091929396602080611607600193601f198782030189528b5190836115f78351604084526040840190612441565b9201519084818403910152612441565b9901950193929101611580565b600081815260016020819052604090912001546001600160a01b03838116911614611648575b61164390612982565b61141d565b9260406000206040519061165b82611e87565b80546001600160a01b039081168352600182015481166020840152600282015416604080840191909152516116978161015f8160038601612388565b60608301526040516116b08161015f8160048601612388565b60808301526040516116c98161015f8160058601612388565b60a08301526040516116e28161015f8160068601612388565b60c08301526040516116fb8161015f8160078601612388565b60e08301526040516117148161015f8160088601612388565b61010083015260405161172e8161015f8160098601612388565b6101208301526040516117488161015f81600a8601612388565b610140830152600b8101805461175d81612d9a565b9161176b6040519384611eec565b81835260208301906000526020600020906000905b8382106117df575050505091600d61164394926117d794610160840152600c810154610180840152015460ff908181166101a084015260081c1615156101c08201526117cc8289612dfb565b5261017b8188612dfb565b93905061163a565b600260206001926040516117f281611ea3565b6040516118038161015f818b612388565b81526040516118188161015f81898c01612388565b83820152815201930191019091611780565b60209060405161183981611e87565b6000815260008382015260006040820152606080808301528060808301528060a08301528060c08301528060e0830152806101008301528061012083015280610140830152610160820152600061018082015260006101a082015260006101c08201528282880101520161140e565b600081815260016020819052604090912001546001600160a01b038481169116146118dc575b6118d790612982565b6113dc565b926118e96118d791612982565b9390506118ce565b3461018e57600036600319011261018e576012546040516001600160a01b039091168152602090f35b3461018e57600036600319011261018e576004546040516001600160a01b039091168152602090f35b3461018e57604036600319011261018e576004356001600160401b03811161018e57611973903690600401611f28565b6024358060005260209160018352604060002061199a60ff600d83015460081c1615612d5c565b80546001600160a01b03929083163303611a3f57928492600c611a0b936119dd6000976119c56124c8565b906119ce612773565b825288820152600b8301612513565b016119e88154612982565b90556004541690604051948580948193633c38a5f560e01b835260048301612793565b03925af18015610a5a57611a1b57005b813d8311611a38575b611a2e8183611eec565b8101031261018e57005b503d611a24565b60405162461bcd60e51b815260048101869052601f60248201527f4f6e6c792072756e206f776e65722063616e2061646420636f6d6d616e6473006044820152606490fd5b3461018e57600036600319011261018e5761011b604051611aa88161015f81611fba565b604051918291602083526020830190612441565b3461018e57606036600319011261018e576004356001600160401b0360243581811161018e57611af0903690600401611f28565b9060443581811161018e57611b09903690600401611f28565b6004546001600160a01b039490611b23908616331461291a565b8060005260209460018652604060002094611b4860ff600d88015460081c1615612d5c565b93604051958787019187831090831117610c4b576119dd8896611a0b96611b7a60009a600c966040528b815282612e0f565b15611b89575b506119c56124c8565b90508a611b80565b3461018e57600036600319011261018e576013546040516001600160a01b039091168152602090f35b3461018e5760031960603682011261018e576001600160401b039060243582811161018e576101608092823603011261018e5760405191820182811084821117610c4b57604052806004013583811161018e57611c1d9060043691840101611f28565b8252602481013583811161018e57611c3b9060043691840101611f28565b6020830152604481013583811161018e57611c5c9060043691840101611f28565b6040830152606481013583811161018e57611c7d9060043691840101611f28565b60608301526084810135838116810361018e57608083015260a481013583811161018e57611cb19060043691840101611f28565b60a083015260c481013583811161018e57611cd29060043691840101611f28565b60c083015260e481013583811161018e57611d2b91611cfa6101449260043691840101611f28565b60e0850152611d0c6101048201611f6f565b610100850152611d1f6101248201611f6f565b61012085015201611f6f565b61014082015260443591821161018e57611d4c611d6a923690600401611f28565b90611d6260018060a01b0360045416331461291a565b600435612991565b005b3461018e57602036600319011261018e57611d85611e71565b6003546001600160a01b03919082163303611ddb5716806bffffffffffffffffffffffff60a01b60045416176004557f107a9fafffb7ac890f780879e423760c9ffea8dcee8045681f40f542aede2cb8600080a2005b60405162461bcd60e51b815260206004820152601360248201527221b0b63632b91034b9903737ba1037bbb732b960691b6044820152606490fd5b3461018e57602036600319011261018e576004356000526001602052602060ff600d6040600020015460081c166040519015158152f35b3461018e57600036600319011261018e576011546001600160a01b03168152602090f35b600435906001600160a01b038216820361018e57565b6101e081019081106001600160401b03821117610c4b57604052565b604081019081106001600160401b03821117610c4b57604052565b6001600160401b038111610c4b57604052565b602081019081106001600160401b03821117610c4b57604052565b90601f801991011681019081106001600160401b03821117610c4b57604052565b6001600160401b038111610c4b57601f01601f191660200190565b81601f8201121561018e57803590611f3f82611f0d565b92611f4d6040519485611eec565b8284526020838301011161018e57816000926020809301838601378301015290565b359063ffffffff8216820361018e57565b90600182811c92168015611fb0575b6020831014611f9a57565b634e487b7160e01b600052602260045260246000fd5b91607f1691611f8f565b9060009160005490611fcb82611f80565b808252916001908181169081156120415750600114611fe957505050565b91929350600080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563916000925b84841061202957505060209250010190565b80546020858501810191909152909301928101612017565b915050602093945060ff929192191683830152151560051b010190565b6007546000929161206e82611f80565b80825291600190818116908115612041575060011461208c57505050565b9192935060076000527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c688916000925b8484106120cd57505060209250010190565b805460208585018101919091529093019281016120bb565b600954600092916120f582611f80565b80825291600190818116908115612041575060011461211357505050565b9192935060096000527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af916000925b84841061215457505060209250010190565b80546020858501810191909152909301928101612142565b600b546000929161217c82611f80565b80825291600190818116908115612041575060011461219a57505050565b91929350600b6000527f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db9916000925b8484106121db57505060209250010190565b805460208585018101919091529093019281016121c9565b600e546000929161220382611f80565b80825291600190818116908115612041575060011461222157505050565b91929350600e6000527fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd916000925b84841061226257505060209250010190565b80546020858501810191909152909301928101612250565b600f546000929161228a82611f80565b8082529160019081811690811561204157506001146122a857505050565b91929350600f6000527f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac802916000925b8484106122e957505060209250010190565b805460208585018101919091529093019281016122d7565b6010546000929161231182611f80565b80825291600190818116908115612041575060011461232f57505050565b9192935060106000527f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae672916000925b84841061237057505060209250010190565b8054602085850181019190915290930192810161235e565b906000929180549161239983611f80565b9182825260019384811690816000146123fb57506001146123bb575b50505050565b90919394506000526020928360002092846000945b8386106123e75750505050010190388080806123b5565b8054858701830152940193859082016123d0565b9294505050602093945060ff191683830152151560051b010190388080806123b5565b60005b8381106124315750506000910152565b8181015183820152602001612421565b9060209161245a8151809281855285808601910161241e565b601f01601f1916010190565b602080820190808352835180925260408301928160408460051b8301019501936000915b84831061249a5750505050505090565b90919293949584806124b8600193603f198682030187528a51612441565b980193019301919493929061248a565b604051906124d582611ea3565b60606020838281520152565b80548210156124fd5760005260206000209060011b0190600090565b634e487b7160e01b600052603260045260246000fd5b805468010000000000000000811015610c4b576125379060019283820181556124e1565b61275d5782518051916001600160401b0392838111610c4b57849061255c8354611f80565b93601f9485811161270c575b506020908583116001146126a357602094929160009183612698575b5050600019600383901b1c191690831b1781555b019401518051928311610c4b576125af8554611f80565b828111612650575b5060209183116001146125f0579282939183926000946125e5575b50501b916000199060031b1c1916179055565b0151925038806125d2565b90601f198316918560005283826000209360005b878282106126375750501061261e575b505050811b019055565b015160001960f88460031b161c19169055388080612614565b8486015187559095019460209485019487935001612604565b8560005260206000208380860160051c8201926020871061268f575b0160051c019085905b8281106126835750506125b7565b60008155018590612675565b9250819261266c565b015190503880612584565b90601f1983169185600052816000209260005b8181106126f4575091859391856020989694106126db575b505050811b018155612598565b015160001960f88460031b161c191690553880806126ce565b8284015185558a9690940193602093840193016126b6565b909192506000848152602081208680860160051c82019360208710612754575b908a9695949392910160051c01915b828110612749575050612568565b81815589950161273b565b9350819361272c565b634e487b7160e01b600052600060045260246000fd5b6040519061278082611ea3565b60048252633ab9b2b960e11b6020830152565b9190825260206040818401526101a0928360408201526000916005546127b881611f80565b90816101e085015260019081811690816000146128f05750600114612893575b505061288361289094956128746128526128396101c09560065460000b6060890152612810603f19998a8a82030160808b015261205e565b906008549063ffffffff821660a08b01521c60000b60c0890152888882030160e08901526120e5565b600a54610100880152878782030161012088015261216c565b600c54610140870152600d5461016087015286868203016101808701526121f3565b9085858303019085015261227a565b9282840301910152612301565b90565b600560009081529294507f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db05b8284106128db57505050810161020001916128836128906127d8565b805485850161020001529285019281016128bf565b60ff19166102008681019190915292151560051b85019092019450612883915061289090506127d8565b1561292157565b60405162461bcd60e51b815260206004820152601460248201527343616c6c6572206973206e6f74206f7261636c6560601b6044820152606490fd5b6040519061296a82611ea3565b6009825268185cdcda5cdd185b9d60ba1b6020830152565b6000198114610ae45760010190565b91909160009281845260209360018552604091828220946129bf84516129b681611ed1565b84815282612e0f565b15612d1057508581016129e181518551906129d982611ed1565b858252612e0f565b15612ad1575b50828101906129fd82518551906129d982611ed1565b15612a315750505050509050600d600c82015491019081549060ff82161115612a24575050565b61ff001916610100179055565b829394955090612a7c918793606060018060a01b0360045416935192015197612a8e8851998a9687958694634b04236b60e01b86526004860152606060248601526064850190612441565b83810360031901604485015290612441565b03925af1918215612ac7575050612aa3575050565b813d8311612ac0575b612ab68183611eec565b8101031261018e57565b503d612aac565b51903d90823e3d90fd5b612af5612adc6124c8565b825189820152612aea61295d565b8152600b8801612513565b600c8601612b038154612982565b9055612b348151855190612b1682611ea3565b600d82526c2a32b1b420b3b2b73a1032379d60991b8a830152612e64565b15612bbd5760018060a01b03601154169051813b15612bb957612b7684928392875194858094819363941fac3760e01b83528b60048401526044830190612441565b8b602483015203925af18015612baf57908391612b97575b50505b386129e7565b612ba090611ebe565b612bab578138612b8e565b5080fd5b84513d85823e3d90fd5b8380fd5b612bee8151855190612bce82611ea3565b600f82526e29b7b1b4b0b620b3b2b73a1032379d60891b8a830152612e64565b15612c635760018060a01b03601254169051813b15612bb957612c3084928392875194858094819363941fac3760e01b83528b60048401526044830190612441565b8b602483015203925af18015612baf57908391612c4f575b5050612b91565b612c5890611ebe565b612bab578138612c48565b612c958193929351855190612c7782611ea3565b600d82526c2230ba30a0b3b2b73a1032379d60991b8a830152612e64565b612ca1575b5090612b91565b60018060a01b03601354169051813b15612d0c57612cde83928392875194858094819363941fac3760e01b83528b60048401526044830190612441565b8b602483015203925af18015612d025715612c9a57612cfc90611ebe565b38612c9a565b84513d84823e3d90fd5b8280fd5b915050612d3c9250600d949150612d256124c8565b91612d2e61295d565b8352820152600b8301612513565b600c8101612d4a8154612982565b905501805461ff001916610100179055565b15612d6357565b60405162461bcd60e51b815260206004820152600f60248201526e149d5b881a5cc8199a5b9a5cda1959608a1b6044820152606490fd5b6001600160401b038111610c4b5760051b60200190565b90612dbb82612d9a565b612dc86040519182611eec565b8281528092612dd9601f1991612d9a565b019060005b828110612dea57505050565b806060602080938501015201612dde565b80518210156124fd5760209160051b010190565b9060405191602092612e3d848281612e30818301968781519384920161241e565b8101038084520182611eec565b51902091612e5d604051918281612e30818301968781519384920161241e565b5190201490565b908051612e7081611f0d565b612e7d6040519182611eec565b818152612e8982611f0d565b6020948286019391601f1901368537600090815b838110612ec35750505050612e3d846040518093612e308383019687925192839161241e565b612eee906001600160f81b0319612eda8285612ef3565b5116841a612ee88288612ef3565b53612982565b612e9d565b9081518110156124fd57016020019056fea26469706673582212205ceda89ea0bfa9561835f4bbc1471a14238f6023eacdeb95806ac24bff17652e64736f6c63430008110033290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563a66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6886e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac802",
  "deployedBytecode": "0x61010080604052600436101561001457600080fd5b60003560e01c90816304495a3b14611e4d575080632eab9c8114611e165780634c69c00f14611d6c5780634cecd88e14611bba5780635923400b14611b915780637397454d14611abc5780637c65d71114611a84578063941fac3714611943578063a89ae4ba1461191a578063b75f07e4146118f1578063c3159838146113b9578063c63b0295146111c7578063d080dd8914610249578063dade4cf91461022b578063eb17429a146101935763ed6e39e5146100d057600080fd5b3461018e5760208060031936011261018e576004359081600052600190818152600b906101038260406000200154612db1565b936000845b61011f575b6040518061011b8882612466565b0390f35b81600052848352836040600020015481101561018957906101818261015f610166610152899796896040600020016124e1565b5060405192838092612388565b0382611eec565b610170828a612dfb565b5261017b8189612dfb565b50612982565b909192610108565b61010d565b600080fd5b3461018e5760208060031936011261018e576004358060005260018281809452600b906101c68260406000200154612db1565b936000955b6101de575b6040518061011b8782612466565b8060005283825282604060002001548610156102265761021f868561016661020e82999a886040600020016124e1565b5061015f6040518094819301612388565b95946101cb565b6101d0565b3461018e57600036600319011261018e576020600254604051908152f35b3461018e576101e036600319011261018e576004356001600160401b03811161018e5761027a903690600401611f28565b60e05260243560ff8116810361018e576044356001600160401b03811161018e576102a9903690600401611f28565b6064356001600160401b03811161018e576102c8903690600401611f28565b916084356001600160401b03811161018e576102e8903690600401611f28565b60a05260a4356001600160a01b038116810361018e5760c435906001600160a01b038216820361018e5760e4356001600160401b03811161018e57610331903690600401611f28565b610104356001600160401b03811161018e57610351903690600401611f28565b610124356001600160401b03811161018e57610371903690600401611f28565b6001600160401b03610144351161018e576103923661014435600401611f28565b906001600160401b03610164351161018e576103b43661016435600401611f28565b926001600160401b03610184351161018e576103d63661018435600401611f28565b946001600160401b036101a4351161018e576103f8366101a435600401611f28565b966001600160401b036101c4351161018e5761041a366101c435600401611f28565b986002548060805260005260016020526040600020918260c0526bffffffffffffffffffffffff60a01b903382855416178455600184019060018060a01b031682825416179055600283019160018060a01b0316908254161790558151906001600160401b038211610c4b576003610493910154611f80565b601f811161117e575b50602091601f821160011461111057918192600092611105575b50508160011b916000199060031b1c191617600360c05101555b80516001600160401b038111610c4b576104ef600460c0510154611f80565b601f81116110bc575b50602091601f821160011461104a5791819260009261103f575b50508160011b916000199060031b1c191617600460c05101555b80516001600160401b038111610c4b5761054b600560c0510154611f80565b601f8111610ff6575b50602091601f8211600114610f8457918192600092610f79575b50508160011b916000199060031b1c191617600560c05101555b80516001600160401b038111610c4b576105a7600660c0510154611f80565b601f8111610f30575b50602091601f8211600114610ebe57918192600092610eb3575b50508160011b916000199060031b1c191617600660c05101555b80516001600160401b038111610c4b57610603600760c0510154611f80565b601f8111610e6a575b50602091601f8211600114610df857918192600092610ded575b50508160011b916000199060031b1c191617600760c05101555b80516001600160401b038111610c4b5761065f600860c0510154611f80565b601f8111610da4575b50602091601f8211600114610d3257918192600092610d27575b50508160011b916000199060031b1c191617600860c05101555b80516001600160401b038111610c4b576106bb600960c0510154611f80565b601f8111610cde575b50602091601f8211600114610c6c57918192600092610c61575b50508160011b916000199060031b1c191617600960c05101555b8051906001600160401b038211610c4b57610718600a60c0510154611f80565b601f8111610c02575b50602090601f8311600114610b865792826107a893600096936020968892610b7b575b50508160011b9187199060031b1c191617600a60c05101555b60c05160ff600d82019287600c8554940155169061ffff191617905560018060a01b0360115416906040519485809481936316846c1560e11b83528760048401526024830190612441565b03925af18015610a5a57610b50575b5060206107ef60009260018060a01b0360125416906040519485809481936316846c1560e11b83528760048401526024830190612441565b03925af18015610a5a57610b25575b5060018060a01b0360135416602060405180926316846c1560e11b8252826004830152816000816108346024820160a051612441565b03925af18015610a5a57610afa575b506108b561084f6124c8565b60405161085f8161015f81611fba565b602082015260405161087081611ea3565b600681526573797374656d60d01b60208201528152610895600b60c051019182612513565b61089d6124c8565b9060e05160208301526108ae612773565b8252612513565b600254600181018111610ae45760010160025560018060a01b036004541660405190633c38a5f560e01b82526080516004830152604060248301526101a0604483015281600060055461090781611f80565b90816101e4850152600181169081600014610ac15750600114610a66575b5091816000816109df602096600654840b60648401526109cf6109bf61099d61098461095d60431995868982030160848a015261205e565b60085463ffffffff811660a48a01528d1c890b60c4890152858882030160e48901526120e5565b600a54610104880152848782030161012488015261216c565b600c54610144870152600d5461016487015283868203016101848701526121f3565b82858203016101a486015261227a565b90838203016101c4840152612301565b03925af18015610a5a57610a2f575b60c0515460405160805160209281906001600160a01b03167f9697c88a6be3b3ed5062f2dcbd719a10914832320686f14e24f7756210a6685e600080a38152f35b602090813d8311610a53575b610a458183611eec565b8101031261018e57806109ee565b503d610a3b565b6040513d6000823e3d90fd5b6005600090815291507f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db05b818310610aa657505081016102040181610925565b80546102048488010152859350602090920191600101610a91565b60ff19166102048086019190915291151560051b84019091019150829050610925565b634e487b7160e01b600052601160045260246000fd5b602090813d8311610b1e575b610b108183611eec565b8101031261018e5780610843565b503d610b06565b602090813d8311610b49575b610b3b8183611eec565b8101031261018e57806107fe565b503d610b31565b602090813d8311610b74575b610b668183611eec565b8101031261018e57816107b7565b503d610b5c565b015190508880610744565b600a60c09392935101928360005260206000209160005b601f1985168110610bea575083602096936107a8969360019360009a97601f19811610610bd2575b505050811b01905561075d565b0151891960f88460031b161c19169055898080610bc5565b91926020600181928685015181550194019201610b9d565b600a60c051016000526020600020601f840160051c810160208510610c44575b601f830160051c82018110610c38575050610721565b60008155600101610c22565b5080610c22565b634e487b7160e01b600052604160045260246000fd5b0151905086806106de565b90600960c0510192836000526020600020906000935b601f1984168510610cc3576001945083601f19811610610caa575b505050811b0190556106f8565b015160001960f88460031b161c19169055878080610c9d565b81810151835560209485019460019093019290910190610c82565b600960c051016000526020600020601f830160051c810160208410610d20575b601f830160051c82018110610d145750506106c4565b60008155600101610cfe565b5080610cfe565b015190508780610682565b90600860c0510192836000526020600020906000935b601f1984168510610d89576001945083601f19811610610d70575b505050811b01905561069c565b015160001960f88460031b161c19169055888080610d63565b81810151835560209485019460019093019290910190610d48565b600860c051016000526020600020601f830160051c810160208410610de6575b601f830160051c82018110610dda575050610668565b60008155600101610dc4565b5080610dc4565b015190508880610626565b90600760c0510192836000526020600020906000935b601f1984168510610e4f576001945083601f19811610610e36575b505050811b019055610640565b015160001960f88460031b161c19169055898080610e29565b81810151835560209485019460019093019290910190610e0e565b600760c051016000526020600020601f830160051c810160208410610eac575b601f830160051c82018110610ea057505061060c565b60008155600101610e8a565b5080610e8a565b0151905089806105ca565b90600660c0510192836000526020600020906000935b601f1984168510610f15576001945083601f19811610610efc575b505050811b0190556105e4565b015160001960f88460031b161c191690558a8080610eef565b81810151835560209485019460019093019290910190610ed4565b600660c051016000526020600020601f830160051c810160208410610f72575b601f830160051c82018110610f665750506105b0565b60008155600101610f50565b5080610f50565b015190508a8061056e565b90600560c0510192836000526020600020906000935b601f1984168510610fdb576001945083601f19811610610fc2575b505050811b019055610588565b015160001960f88460031b161c191690558b8080610fb5565b81810151835560209485019460019093019290910190610f9a565b600560c051016000526020600020601f830160051c810160208410611038575b601f830160051c8201811061102c575050610554565b60008155600101611016565b5080611016565b015190508b80610512565b90600460c0510192836000526020600020906000935b601f19841685106110a1576001945083601f19811610611088575b505050811b01905561052c565b015160001960f88460031b161c191690558c808061107b565b81810151835560209485019460019093019290910190611060565b600460c051016000526020600020601f830160051c8101602084106110fe575b601f830160051c820181106110f25750506104f8565b600081556001016110dc565b50806110dc565b015190508c806104b6565b600360c0510192836000526020600020916000601f198516905b818110611166575090846001959493921061114d575b505050811b0190556104d0565b015160001960f88460031b161c191690558d8080611140565b9293602060018192878601518155019501930161112a565b600360c051016000526020600020601f830160051c8101602084106111c0575b601f830160051c820181106111b457505061049c565b6000815560010161119e565b508061119e565b3461018e57602036600319011261018e5760043560005260016020526040600020600160a01b6001900390818154169082600182015416926002820154166040518080600385019061121891612388565b036112239082611eec565b604051806112348160048701612388565b0361123f9082611eec565b604051806112508160058801612388565b0361125b9082611eec565b6040518061126c8160068901612388565b036112779082611eec565b60405190816112898160078a01612388565b036112949083611eec565b60405192836112a68160088b01612388565b036112b19085611eec565b60405194856112c38160098c01612388565b036112ce9087611eec565b60405196876112e081600a8d01612388565b036112eb9089611eec565b600c8a015499600d0154986040519c8d9c8d5260208d015260408c01526101c08060608d01528b0161131c91612441565b8a810360808c015261132d91612441565b89810360a08b015261133e91612441565b88810360c08a015261134f91612441565b87810360e089015261136091612441565b86810361010088015261137291612441565b85810361012087015261138491612441565b84810361014086015261139691612441565b9161016084015260ff811661018084015260081c60ff1615156101a08301520390f35b3461018e57602036600319011261018e576113d2611e71565b6000906000600254905b8181106118a857506113ed83612d9a565b926113fb6040519485611eec565b80845261140a601f1991612d9a565b0160005b81811061182a57505060009160005b82811061161457846040518091602082016020835281518091526040830190602060408260051b8601019301916000905b82821061145d57505050500390f35b919390929450603f1986820301825284519060018060a01b03825116815260018060a01b03602083015116602082015260018060a01b03604083015116604082015261155561154161152d6115196115076114f46114e16114ce6060808b0151906101e080918c01528a0190612441565b6080808b0151908a8303908b0152612441565b60a0808a015190898303908a0152612441565b60c0808901519088830390890152612441565b60e087015186820360e0880152612441565b610100808701519086830390870152612441565b610120808601519085830390860152612441565b610140808501519084830390850152612441565b9161016092838201519383820390840152835180825260208201906020808260051b85010196019260005b8281106115c9575050505050600192602092839261018080820151908301526101a060ff8183015116908301526101c0809101511515910152960192019201859493919261144e565b9091929396602080611607600193601f198782030189528b5190836115f78351604084526040840190612441565b9201519084818403910152612441565b9901950193929101611580565b600081815260016020819052604090912001546001600160a01b03838116911614611648575b61164390612982565b61141d565b9260406000206040519061165b82611e87565b80546001600160a01b039081168352600182015481166020840152600282015416604080840191909152516116978161015f8160038601612388565b60608301526040516116b08161015f8160048601612388565b60808301526040516116c98161015f8160058601612388565b60a08301526040516116e28161015f8160068601612388565b60c08301526040516116fb8161015f8160078601612388565b60e08301526040516117148161015f8160088601612388565b61010083015260405161172e8161015f8160098601612388565b6101208301526040516117488161015f81600a8601612388565b610140830152600b8101805461175d81612d9a565b9161176b6040519384611eec565b81835260208301906000526020600020906000905b8382106117df575050505091600d61164394926117d794610160840152600c810154610180840152015460ff908181166101a084015260081c1615156101c08201526117cc8289612dfb565b5261017b8188612dfb565b93905061163a565b600260206001926040516117f281611ea3565b6040516118038161015f818b612388565b81526040516118188161015f81898c01612388565b83820152815201930191019091611780565b60209060405161183981611e87565b6000815260008382015260006040820152606080808301528060808301528060a08301528060c08301528060e0830152806101008301528061012083015280610140830152610160820152600061018082015260006101a082015260006101c08201528282880101520161140e565b600081815260016020819052604090912001546001600160a01b038481169116146118dc575b6118d790612982565b6113dc565b926118e96118d791612982565b9390506118ce565b3461018e57600036600319011261018e576012546040516001600160a01b039091168152602090f35b3461018e57600036600319011261018e576004546040516001600160a01b039091168152602090f35b3461018e57604036600319011261018e576004356001600160401b03811161018e57611973903690600401611f28565b6024358060005260209160018352604060002061199a60ff600d83015460081c1615612d5c565b80546001600160a01b03929083163303611a3f57928492600c611a0b936119dd6000976119c56124c8565b906119ce612773565b825288820152600b8301612513565b016119e88154612982565b90556004541690604051948580948193633c38a5f560e01b835260048301612793565b03925af18015610a5a57611a1b57005b813d8311611a38575b611a2e8183611eec565b8101031261018e57005b503d611a24565b60405162461bcd60e51b815260048101869052601f60248201527f4f6e6c792072756e206f776e65722063616e2061646420636f6d6d616e6473006044820152606490fd5b3461018e57600036600319011261018e5761011b604051611aa88161015f81611fba565b604051918291602083526020830190612441565b3461018e57606036600319011261018e576004356001600160401b0360243581811161018e57611af0903690600401611f28565b9060443581811161018e57611b09903690600401611f28565b6004546001600160a01b039490611b23908616331461291a565b8060005260209460018652604060002094611b4860ff600d88015460081c1615612d5c565b93604051958787019187831090831117610c4b576119dd8896611a0b96611b7a60009a600c966040528b815282612e0f565b15611b89575b506119c56124c8565b90508a611b80565b3461018e57600036600319011261018e576013546040516001600160a01b039091168152602090f35b3461018e5760031960603682011261018e576001600160401b039060243582811161018e576101608092823603011261018e5760405191820182811084821117610c4b57604052806004013583811161018e57611c1d9060043691840101611f28565b8252602481013583811161018e57611c3b9060043691840101611f28565b6020830152604481013583811161018e57611c5c9060043691840101611f28565b6040830152606481013583811161018e57611c7d9060043691840101611f28565b60608301526084810135838116810361018e57608083015260a481013583811161018e57611cb19060043691840101611f28565b60a083015260c481013583811161018e57611cd29060043691840101611f28565b60c083015260e481013583811161018e57611d2b91611cfa6101449260043691840101611f28565b60e0850152611d0c6101048201611f6f565b610100850152611d1f6101248201611f6f565b61012085015201611f6f565b61014082015260443591821161018e57611d4c611d6a923690600401611f28565b90611d6260018060a01b0360045416331461291a565b600435612991565b005b3461018e57602036600319011261018e57611d85611e71565b6003546001600160a01b03919082163303611ddb5716806bffffffffffffffffffffffff60a01b60045416176004557f107a9fafffb7ac890f780879e423760c9ffea8dcee8045681f40f542aede2cb8600080a2005b60405162461bcd60e51b815260206004820152601360248201527221b0b63632b91034b9903737ba1037bbb732b960691b6044820152606490fd5b3461018e57602036600319011261018e576004356000526001602052602060ff600d6040600020015460081c166040519015158152f35b3461018e57600036600319011261018e576011546001600160a01b03168152602090f35b600435906001600160a01b038216820361018e57565b6101e081019081106001600160401b03821117610c4b57604052565b604081019081106001600160401b03821117610c4b57604052565b6001600160401b038111610c4b57604052565b602081019081106001600160401b03821117610c4b57604052565b90601f801991011681019081106001600160401b03821117610c4b57604052565b6001600160401b038111610c4b57601f01601f191660200190565b81601f8201121561018e57803590611f3f82611f0d565b92611f4d6040519485611eec565b8284526020838301011161018e57816000926020809301838601378301015290565b359063ffffffff8216820361018e57565b90600182811c92168015611fb0575b6020831014611f9a57565b634e487b7160e01b600052602260045260246000fd5b91607f1691611f8f565b9060009160005490611fcb82611f80565b808252916001908181169081156120415750600114611fe957505050565b91929350600080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563916000925b84841061202957505060209250010190565b80546020858501810191909152909301928101612017565b915050602093945060ff929192191683830152151560051b010190565b6007546000929161206e82611f80565b80825291600190818116908115612041575060011461208c57505050565b9192935060076000527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c688916000925b8484106120cd57505060209250010190565b805460208585018101919091529093019281016120bb565b600954600092916120f582611f80565b80825291600190818116908115612041575060011461211357505050565b9192935060096000527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af916000925b84841061215457505060209250010190565b80546020858501810191909152909301928101612142565b600b546000929161217c82611f80565b80825291600190818116908115612041575060011461219a57505050565b91929350600b6000527f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db9916000925b8484106121db57505060209250010190565b805460208585018101919091529093019281016121c9565b600e546000929161220382611f80565b80825291600190818116908115612041575060011461222157505050565b91929350600e6000527fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd916000925b84841061226257505060209250010190565b80546020858501810191909152909301928101612250565b600f546000929161228a82611f80565b8082529160019081811690811561204157506001146122a857505050565b91929350600f6000527f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac802916000925b8484106122e957505060209250010190565b805460208585018101919091529093019281016122d7565b6010546000929161231182611f80565b80825291600190818116908115612041575060011461232f57505050565b9192935060106000527f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae672916000925b84841061237057505060209250010190565b8054602085850181019190915290930192810161235e565b906000929180549161239983611f80565b9182825260019384811690816000146123fb57506001146123bb575b50505050565b90919394506000526020928360002092846000945b8386106123e75750505050010190388080806123b5565b8054858701830152940193859082016123d0565b9294505050602093945060ff191683830152151560051b010190388080806123b5565b60005b8381106124315750506000910152565b8181015183820152602001612421565b9060209161245a8151809281855285808601910161241e565b601f01601f1916010190565b602080820190808352835180925260408301928160408460051b8301019501936000915b84831061249a5750505050505090565b90919293949584806124b8600193603f198682030187528a51612441565b980193019301919493929061248a565b604051906124d582611ea3565b60606020838281520152565b80548210156124fd5760005260206000209060011b0190600090565b634e487b7160e01b600052603260045260246000fd5b805468010000000000000000811015610c4b576125379060019283820181556124e1565b61275d5782518051916001600160401b0392838111610c4b57849061255c8354611f80565b93601f9485811161270c575b506020908583116001146126a357602094929160009183612698575b5050600019600383901b1c191690831b1781555b019401518051928311610c4b576125af8554611f80565b828111612650575b5060209183116001146125f0579282939183926000946125e5575b50501b916000199060031b1c1916179055565b0151925038806125d2565b90601f198316918560005283826000209360005b878282106126375750501061261e575b505050811b019055565b015160001960f88460031b161c19169055388080612614565b8486015187559095019460209485019487935001612604565b8560005260206000208380860160051c8201926020871061268f575b0160051c019085905b8281106126835750506125b7565b60008155018590612675565b9250819261266c565b015190503880612584565b90601f1983169185600052816000209260005b8181106126f4575091859391856020989694106126db575b505050811b018155612598565b015160001960f88460031b161c191690553880806126ce565b8284015185558a9690940193602093840193016126b6565b909192506000848152602081208680860160051c82019360208710612754575b908a9695949392910160051c01915b828110612749575050612568565b81815589950161273b565b9350819361272c565b634e487b7160e01b600052600060045260246000fd5b6040519061278082611ea3565b60048252633ab9b2b960e11b6020830152565b9190825260206040818401526101a0928360408201526000916005546127b881611f80565b90816101e085015260019081811690816000146128f05750600114612893575b505061288361289094956128746128526128396101c09560065460000b6060890152612810603f19998a8a82030160808b015261205e565b906008549063ffffffff821660a08b01521c60000b60c0890152888882030160e08901526120e5565b600a54610100880152878782030161012088015261216c565b600c54610140870152600d5461016087015286868203016101808701526121f3565b9085858303019085015261227a565b9282840301910152612301565b90565b600560009081529294507f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db05b8284106128db57505050810161020001916128836128906127d8565b805485850161020001529285019281016128bf565b60ff19166102008681019190915292151560051b85019092019450612883915061289090506127d8565b1561292157565b60405162461bcd60e51b815260206004820152601460248201527343616c6c6572206973206e6f74206f7261636c6560601b6044820152606490fd5b6040519061296a82611ea3565b6009825268185cdcda5cdd185b9d60ba1b6020830152565b6000198114610ae45760010190565b91909160009281845260209360018552604091828220946129bf84516129b681611ed1565b84815282612e0f565b15612d1057508581016129e181518551906129d982611ed1565b858252612e0f565b15612ad1575b50828101906129fd82518551906129d982611ed1565b15612a315750505050509050600d600c82015491019081549060ff82161115612a24575050565b61ff001916610100179055565b829394955090612a7c918793606060018060a01b0360045416935192015197612a8e8851998a9687958694634b04236b60e01b86526004860152606060248601526064850190612441565b83810360031901604485015290612441565b03925af1918215612ac7575050612aa3575050565b813d8311612ac0575b612ab68183611eec565b8101031261018e57565b503d612aac565b51903d90823e3d90fd5b612af5612adc6124c8565b825189820152612aea61295d565b8152600b8801612513565b600c8601612b038154612982565b9055612b348151855190612b1682611ea3565b600d82526c2a32b1b420b3b2b73a1032379d60991b8a830152612e64565b15612bbd5760018060a01b03601154169051813b15612bb957612b7684928392875194858094819363941fac3760e01b83528b60048401526044830190612441565b8b602483015203925af18015612baf57908391612b97575b50505b386129e7565b612ba090611ebe565b612bab578138612b8e565b5080fd5b84513d85823e3d90fd5b8380fd5b612bee8151855190612bce82611ea3565b600f82526e29b7b1b4b0b620b3b2b73a1032379d60891b8a830152612e64565b15612c635760018060a01b03601254169051813b15612bb957612c3084928392875194858094819363941fac3760e01b83528b60048401526044830190612441565b8b602483015203925af18015612baf57908391612c4f575b5050612b91565b612c5890611ebe565b612bab578138612c48565b612c958193929351855190612c7782611ea3565b600d82526c2230ba30a0b3b2b73a1032379d60991b8a830152612e64565b612ca1575b5090612b91565b60018060a01b03601354169051813b15612d0c57612cde83928392875194858094819363941fac3760e01b83528b60048401526044830190612441565b8b602483015203925af18015612d025715612c9a57612cfc90611ebe565b38612c9a565b84513d84823e3d90fd5b8280fd5b915050612d3c9250600d949150612d256124c8565b91612d2e61295d565b8352820152600b8301612513565b600c8101612d4a8154612982565b905501805461ff001916610100179055565b15612d6357565b60405162461bcd60e51b815260206004820152600f60248201526e149d5b881a5cc8199a5b9a5cda1959608a1b6044820152606490fd5b6001600160401b038111610c4b5760051b60200190565b90612dbb82612d9a565b612dc86040519182611eec565b8281528092612dd9601f1991612d9a565b019060005b828110612dea57505050565b806060602080938501015201612dde565b80518210156124fd5760209160051b010190565b9060405191602092612e3d848281612e30818301968781519384920161241e565b8101038084520182611eec565b51902091612e5d604051918281612e30818301968781519384920161241e565b5190201490565b908051612e7081611f0d565b612e7d6040519182611eec565b818152612e8982611f0d565b6020948286019391601f1901368537600090815b838110612ec35750505050612e3d846040518093612e308383019687925192839161241e565b612eee906001600160f81b0319612eda8285612ef3565b5116841a612ee88288612ef3565b53612982565b612e9d565b9081518110156124fd57016020019056fea26469706673582212205ceda89ea0bfa9561835f4bbc1471a14238f6023eacdeb95806ac24bff17652e64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 643,
        "contract": "contracts/LeadAgent.sol:LeadAgent",
        "label": "prompt",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 686,
        "contract": "contracts/LeadAgent.sol:LeadAgent",
        "label": "agentRuns",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(AgentRun)681_storage)"
      },
      {
        "astId": 688,
        "contract": "contracts/LeadAgent.sol:LeadAgent",
        "label": "agentRunCount",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 696,
        "contract": "contracts/LeadAgent.sol:LeadAgent",
        "label": "owner",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 698,
        "contract": "contracts/LeadAgent.sol:LeadAgent",
        "label": "oracleAddress",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 705,
        "contract": "contracts/LeadAgent.sol:LeadAgent",
        "label": "config",
        "offset": 0,
        "slot": "5",
        "type": "t_struct(OpenAiRequest)1896_storage"
      },
      {
        "astId": 708,
        "contract": "contracts/LeadAgent.sol:LeadAgent",
        "label": "techAgent",
        "offset": 0,
        "slot": "17",
        "type": "t_contract(IOpenAiChatGpt)1855"
      },
      {
        "astId": 711,
        "contract": "contracts/LeadAgent.sol:LeadAgent",
        "label": "socialAgent",
        "offset": 0,
        "slot": "18",
        "type": "t_contract(IOpenAiChatGpt)1855"
      },
      {
        "astId": 714,
        "contract": "contracts/LeadAgent.sol:LeadAgent",
        "label": "dataAgent",
        "offset": 0,
        "slot": "19",
        "type": "t_contract(IOpenAiChatGpt)1855"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Message)648_storage)dyn_storage": {
        "base": "t_struct(Message)648_storage",
        "encoding": "dynamic_array",
        "label": "struct LeadAgent.Message[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IOpenAiChatGpt)1855": {
        "encoding": "inplace",
        "label": "contract IOpenAiChatGpt",
        "numberOfBytes": "20"
      },
      "t_int8": {
        "encoding": "inplace",
        "label": "int8",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_struct(AgentRun)681_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LeadAgent.AgentRun)",
        "numberOfBytes": "32",
        "value": "t_struct(AgentRun)681_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AgentRun)681_storage": {
        "encoding": "inplace",
        "label": "struct LeadAgent.AgentRun",
        "members": [
          {
            "astId": 650,
            "contract": "contracts/LeadAgent.sol:LeadAgent",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 652,
            "contract": "contracts/LeadAgent.sol:LeadAgent",
            "label": "creator",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 654,
            "contract": "contracts/LeadAgent.sol:LeadAgent",
            "label": "target",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 656,
            "contract": "contracts/LeadAgent.sol:LeadAgent",
            "label": "targetFirstName",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 658,
            "contract": "contracts/LeadAgent.sol:LeadAgent",
            "label": "targetFriend",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 660,
            "contract": "contracts/LeadAgent.sol:LeadAgent",
            "label": "situation",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 662,
            "contract": "contracts/LeadAgent.sol:LeadAgent",
            "label": "publicInfo",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          },
          {
            "astId": 664,
            "contract": "contracts/LeadAgent.sol:LeadAgent",
            "label": "privateInfo",
            "offset": 0,
            "slot": "7",
            "type": "t_string_storage"
          },
          {
            "astId": 666,
            "contract": "contracts/LeadAgent.sol:LeadAgent",
            "label": "groupTitle",
            "offset": 0,
            "slot": "8",
            "type": "t_string_storage"
          },
          {
            "astId": 668,
            "contract": "contracts/LeadAgent.sol:LeadAgent",
            "label": "groupImage",
            "offset": 0,
            "slot": "9",
            "type": "t_string_storage"
          },
          {
            "astId": 670,
            "contract": "contracts/LeadAgent.sol:LeadAgent",
            "label": "groupId",
            "offset": 0,
            "slot": "10",
            "type": "t_string_storage"
          },
          {
            "astId": 674,
            "contract": "contracts/LeadAgent.sol:LeadAgent",
            "label": "commands",
            "offset": 0,
            "slot": "11",
            "type": "t_array(t_struct(Message)648_storage)dyn_storage"
          },
          {
            "astId": 676,
            "contract": "contracts/LeadAgent.sol:LeadAgent",
            "label": "responsesCount",
            "offset": 0,
            "slot": "12",
            "type": "t_uint256"
          },
          {
            "astId": 678,
            "contract": "contracts/LeadAgent.sol:LeadAgent",
            "label": "max_iterations",
            "offset": 0,
            "slot": "13",
            "type": "t_uint8"
          },
          {
            "astId": 680,
            "contract": "contracts/LeadAgent.sol:LeadAgent",
            "label": "is_finished",
            "offset": 1,
            "slot": "13",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "448"
      },
      "t_struct(Message)648_storage": {
        "encoding": "inplace",
        "label": "struct LeadAgent.Message",
        "members": [
          {
            "astId": 645,
            "contract": "contracts/LeadAgent.sol:LeadAgent",
            "label": "role",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 647,
            "contract": "contracts/LeadAgent.sol:LeadAgent",
            "label": "content",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(OpenAiRequest)1896_storage": {
        "encoding": "inplace",
        "label": "struct IOracle.OpenAiRequest",
        "members": [
          {
            "astId": 1871,
            "contract": "contracts/LeadAgent.sol:LeadAgent",
            "label": "model",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 1873,
            "contract": "contracts/LeadAgent.sol:LeadAgent",
            "label": "frequencyPenalty",
            "offset": 0,
            "slot": "1",
            "type": "t_int8"
          },
          {
            "astId": 1875,
            "contract": "contracts/LeadAgent.sol:LeadAgent",
            "label": "logitBias",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 1877,
            "contract": "contracts/LeadAgent.sol:LeadAgent",
            "label": "maxTokens",
            "offset": 0,
            "slot": "3",
            "type": "t_uint32"
          },
          {
            "astId": 1879,
            "contract": "contracts/LeadAgent.sol:LeadAgent",
            "label": "presencePenalty",
            "offset": 4,
            "slot": "3",
            "type": "t_int8"
          },
          {
            "astId": 1881,
            "contract": "contracts/LeadAgent.sol:LeadAgent",
            "label": "responseFormat",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 1883,
            "contract": "contracts/LeadAgent.sol:LeadAgent",
            "label": "seed",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 1885,
            "contract": "contracts/LeadAgent.sol:LeadAgent",
            "label": "stop",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          },
          {
            "astId": 1887,
            "contract": "contracts/LeadAgent.sol:LeadAgent",
            "label": "temperature",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 1889,
            "contract": "contracts/LeadAgent.sol:LeadAgent",
            "label": "topP",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 1891,
            "contract": "contracts/LeadAgent.sol:LeadAgent",
            "label": "tools",
            "offset": 0,
            "slot": "9",
            "type": "t_string_storage"
          },
          {
            "astId": 1893,
            "contract": "contracts/LeadAgent.sol:LeadAgent",
            "label": "toolChoice",
            "offset": 0,
            "slot": "10",
            "type": "t_string_storage"
          },
          {
            "astId": 1895,
            "contract": "contracts/LeadAgent.sol:LeadAgent",
            "label": "user",
            "offset": 0,
            "slot": "11",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "384"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}